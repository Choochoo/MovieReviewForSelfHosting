name: Deploy MovieReview Multi-Instance

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      instances:
        description: 'Instances to deploy (comma-separated: friends:5010,kids:5012,demo:5015)'
        required: true
        default: 'friends:5010,kids:5012,demo:5015'
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './MovieReviewApp.sln'
  PROJECT_PATH: './MovieReviewApp/MovieReviewApp.csproj'
  PUBLISH_OUTPUT: './publish'
  DEPLOY_BASE_PATH: 'C:\inetpub\wwwroot\MovieReview'

jobs:
  build-and-test:
    runs-on: windows-latest
    name: Build and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal
      
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ${{ env.PUBLISH_OUTPUT }} --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        retention-days: 30

  deploy-instances:
    runs-on: self-hosted
    name: Deploy All Instances
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deployment_environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
    
    - name: Verify ASP.NET Core Hosting Bundle
      shell: powershell
      run: |
        # Check if ASP.NET Core Hosting Bundle is installed
        $modules = Get-WebGlobalModule | Where-Object { $_.Name -like "AspNetCore*" }
        if ($modules) {
          Write-Host "âœ“ ASP.NET Core Hosting Bundle is installed"
          $modules | ForEach-Object { Write-Host "  - $($_.Name)" }
        } else {
          Write-Error "ASP.NET Core Hosting Bundle is NOT installed! Please install it first."
          Write-Host "Download from: https://dotnet.microsoft.com/en-us/download/dotnet/9.0"
          exit 1
        }
        
    - name: Clean and Deploy Instances
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"
        Import-Module WebAdministration
        
        # Get instances configuration - EXACTLY as shown in IIS
        $instancesInput = '${{ github.event.inputs.instances }}'
        if ([string]::IsNullOrWhiteSpace($instancesInput)) {
          # Default instances - lowercase as shown in IIS
          $instancesInput = 'friends:5010,kids:5012,demo:5015'
        }
        
        Write-Host "================================================"
        Write-Host "Deploying MovieReview Instances"
        Write-Host "================================================"
        Write-Host "Instances to deploy: $instancesInput"
        
        # Parse instances - maintain exact case
        $instances = $instancesInput -split ',' | ForEach-Object {
          $parts = $_ -split ':'
          @{
            Name = $parts[0].Trim()  # Keep exact case as provided
            Port = [int]$parts[1].Trim()
          }
        }
        
        # First, stop ALL MovieReview app pools and sites
        Write-Host "`n=== Stopping all MovieReview instances ==="
        Get-Website | Where-Object { $_.Name -like "MovieReview-*" } | ForEach-Object {
          Write-Host "Stopping website: $($_.Name)"
          Stop-Website -Name $_.Name -ErrorAction SilentlyContinue
        }
        
        Get-IISAppPool | Where-Object { $_.Name -like "MovieReview-*" } | ForEach-Object {
          Write-Host "Stopping app pool: $($_.Name)"
          Stop-WebAppPool -Name $_.Name -ErrorAction SilentlyContinue
        }
        
        # Wait for everything to stop
        Start-Sleep -Seconds 5
        
        # Deploy each instance
        foreach ($instance in $instances) {
          $instanceName = $instance.Name
          $instancePort = $instance.Port
          $deployPath = "${{ env.DEPLOY_BASE_PATH }}\$instanceName"
          $dataPath = "$deployPath\data"
          $logsPath = "$deployPath\logs"
          $siteName = "MovieReview-$instanceName"
          $appPoolName = "MovieReview-$instanceName"
          
          Write-Host "`n================================================"
          Write-Host "Deploying Instance: $instanceName"
          Write-Host "================================================"
          Write-Host "Port: $instancePort"
          Write-Host "Path: $deployPath"
          
          # Create directory structure
          Write-Host "Creating directories..."
          @($deployPath, $dataPath, $logsPath) | ForEach-Object {
            if (!(Test-Path $_)) {
              New-Item -Path $_ -ItemType Directory -Force | Out-Null
              Write-Host "  Created: $_"
            }
          }
          
          # Deploy files with robocopy
          Write-Host "Copying application files..."
          $robocopyArgs = @(
            "${{ env.PUBLISH_OUTPUT }}",
            $deployPath,
            "/E",           # Copy subdirectories including empty ones
            "/PURGE",       # Delete files in destination that don't exist in source
            "/R:2",         # Retry 2 times
            "/W:2",         # Wait 2 seconds between retries
            "/NFL",         # No file list
            "/NDL",         # No directory list
            "/NJH",         # No job header
            "/NJS",         # No job summary
            "/XD", "logs", "data"  # Exclude logs and data directories
          )
          
          & robocopy @robocopyArgs
          $robocopyExitCode = $LASTEXITCODE
          
          # Robocopy exit codes 0-7 are success
          if ($robocopyExitCode -ge 8) {
            Write-Error "Robocopy failed with exit code: $robocopyExitCode"
            exit 1
          }
          Write-Host "  Files deployed successfully"
          
          # Create web.config
          Write-Host "Creating web.config..."
          $webConfigContent = @"
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <location path="." inheritInChildApplications="false">
    <system.webServer>
      <handlers>
        <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
      </handlers>
      <aspNetCore processPath="dotnet" 
                  arguments=".\MovieReviewApp.dll" 
                  stdoutLogEnabled="true" 
                  stdoutLogFile=".\logs\stdout" 
                  hostingModel="InProcess">
        <environmentVariables>
          <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
          <environmentVariable name="ASPNETCORE_IIS_HTTPAUTH" value="windows" />
          <environmentVariable name="MOVIEREVIEW_INSTANCE" value="$instanceName" />
          <environmentVariable name="MOVIEREVIEW_PORT" value="$instancePort" />
          <environmentVariable name="MOVIEREVIEW_DATA_PATH" value="$dataPath" />
        </environmentVariables>
      </aspNetCore>
      <security>
        <requestFiltering>
          <requestLimits maxAllowedContentLength="10737418240" />
        </requestFiltering>
      </security>
    </system.webServer>
  </location>
</configuration>
"@
          Set-Content -Path "$deployPath\web.config" -Value $webConfigContent -Encoding UTF8
          Write-Host "  web.config created"
          
          # Remove existing app pool and website if they exist
          if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
            Remove-WebAppPool -Name $appPoolName -Force
            Write-Host "  Removed existing app pool"
          }
          
          if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
            Remove-Website -Name $siteName
            Write-Host "  Removed existing website"
          }
          
          # Create app pool
          Write-Host "Creating IIS Application Pool..."
          New-WebAppPool -Name $appPoolName -Force
          
          # Configure app pool for .NET Core
          $appPool = Get-Item "IIS:\AppPools\$appPoolName"
          $appPool.managedRuntimeVersion = ""  # No managed code for .NET Core
          $appPool.enable32BitAppOnWin64 = $false
          $appPool.processIdentity.identityType = "ApplicationPoolIdentity"
          $appPool.recycling.periodicRestart.time = [TimeSpan]::Zero  # Disable periodic restart
          $appPool.startMode = "AlwaysRunning"
          $appPool | Set-Item
          Write-Host "  App pool configured"
          
          # Create website
          Write-Host "Creating IIS Website..."
          New-Website -Name $siteName `
                      -Port $instancePort `
                      -PhysicalPath $deployPath `
                      -ApplicationPool $appPoolName
          Write-Host "  Website created on port $instancePort"
          
          # Set permissions
          Write-Host "Setting permissions..."
          $appPoolIdentity = "IIS AppPool\$appPoolName"
          
          # Grant full control to app pool identity
          & icacls $deployPath /grant "${appPoolIdentity}:(OI)(CI)F" /T /Q
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "Failed to set permissions for app pool identity, trying IIS_IUSRS"
            & icacls $deployPath /grant "IIS_IUSRS:(OI)(CI)F" /T /Q
          }
          Write-Host "  Permissions configured"
          
          # Start the app pool and website
          Write-Host "Starting IIS resources..."
          Start-WebAppPool -Name $appPoolName
          Start-Website -Name $siteName
          Write-Host "  Started app pool and website"
          
          Write-Host "âœ“ Instance $instanceName deployed successfully!"
        }
        
        Write-Host "`n================================================"
        Write-Host "All instances deployed!"
        Write-Host "================================================"
        
    - name: Verify Deployments
      shell: powershell
      run: |
        $instancesInput = '${{ github.event.inputs.instances }}'
        if ([string]::IsNullOrWhiteSpace($instancesInput)) {
          $instancesInput = 'friends:5010,kids:5012,demo:5015'
        }
        
        $instances = $instancesInput -split ',' | ForEach-Object {
          $parts = $_ -split ':'
          @{
            Name = $parts[0].Trim()
            Port = [int]$parts[1].Trim()
          }
        }
        
        Write-Host "`nVerifying deployments..."
        Write-Host "========================"
        
        # Give IIS time to fully start
        Start-Sleep -Seconds 10
        
        $failed = $false
        foreach ($instance in $instances) {
          $url = "http://localhost:$($instance.Port)"
          Write-Host "`nTesting $($instance.Name) at $url"
          
          $maxAttempts = 5
          $attempt = 0
          $success = $false
          
          while ($attempt -lt $maxAttempts -and -not $success) {
            $attempt++
            try {
              $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
              if ($response.StatusCode -eq 200) {
                Write-Host "âœ“ $($instance.Name) is responding (HTTP $($response.StatusCode))"
                $success = $true
              }
            } catch {
              Write-Host "  Attempt $attempt/$maxAttempts failed: $($_.Exception.Message)"
              if ($attempt -lt $maxAttempts) {
                Start-Sleep -Seconds 5
              }
            }
          }
          
          if (-not $success) {
            Write-Host "âœ— $($instance.Name) failed to respond"
            
            # Check logs for debugging
            $logPath = "${{ env.DEPLOY_BASE_PATH }}\$($instance.Name)\logs\stdout*.log"
            if (Test-Path $logPath) {
              Write-Host "  Recent logs:"
              Get-Content $logPath -Tail 10 | ForEach-Object { Write-Host "    $_" }
            }
            
            $failed = $true
          }
        }
        
        if ($failed) {
          Write-Error "Some instances failed verification"
          exit 1
        }
        
        Write-Host "`nâœ“ All instances are running!"
        Write-Host "`nAccess your instances at:"
        foreach ($instance in $instances) {
          Write-Host "  $($instance.Name): http://localhost:$($instance.Port)"
        }