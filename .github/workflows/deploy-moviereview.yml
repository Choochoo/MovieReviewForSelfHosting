name: Deploy MovieReview Multi-Instance

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      instances_to_deploy:
        description: 'Instances to deploy (comma-separated: adult,kids,demo or all)'
        required: true
        default: 'all'
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './MovieReviewApp.sln'
  PROJECT_PATH: './MovieReviewApp/MovieReviewApp.csproj'
  PUBLISH_OUTPUT: './publish'

jobs:
  build-and-test:
    runs-on: windows-latest
    name: Build and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal
      
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ${{ env.PUBLISH_OUTPUT }} --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        retention-days: 30

  security-scan:
    runs-on: windows-latest
    name: Security Scan
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        
    - name: Scan for secrets
      run: |
        Write-Host "Scanning for potential secrets..."
        $secretPatterns = @("api[_-]key", "secret", "password", "token")
        $foundSecrets = $false
        foreach ($pattern in $secretPatterns) {
          $results = Get-ChildItem -Path "${{ env.PUBLISH_OUTPUT }}" -Recurse -File | Select-String -Pattern $pattern -AllMatches
          if ($results) {
            Write-Host "::warning::Found potential secrets matching pattern '$pattern' - please review"
            $foundSecrets = $true
          }
        }
        if (-not $foundSecrets) {
          Write-Host "No potential secrets found in build output"
        }
      shell: powershell -ExecutionPolicy Bypass
        
    - name: Check for forbidden folders
      run: |
        Write-Host "Checking for forbidden folders..."
        $forbiddenDirs = @("instances", "secrets", "temp", "uploads")
        foreach ($dir in $forbiddenDirs) {
          $fullPath = Join-Path "${{ env.PUBLISH_OUTPUT }}" $dir
          if (Test-Path $fullPath) {
            Write-Host "::error::Forbidden directory '$dir' found in build output"
            exit 1
          }
        }
        Write-Host "No forbidden directories found"
      shell: powershell -ExecutionPolicy Bypass

  deploy-to-self-hosted:
    runs-on: self-hosted
    name: Deploy to IIS
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deployment_environment || 'staging' }}
    
    strategy:
      matrix:
        instance: 
          - name: adult
            port: 5010
            display_name: "Movie Review (Adults)"
            environment: "Adult"
          - name: kids  
            port: 5012
            display_name: "Movie Review (Kids)"
            environment: "Kids"
          - name: demo
            port: 5015
            display_name: "Movie Review (Demo)"
            environment: "Demo"
      fail-fast: false
    
    steps:
    - name: Check if instance should be deployed
      id: should_deploy
      run: |
        $instancesInput = "${{ github.event.inputs.instances_to_deploy || 'all' }}"
        $instanceName = "${{ matrix.instance.name }}"
        
        if ($instancesInput -eq "all" -or $instancesInput.Split(',').Trim() -contains $instanceName) {
          Write-Output "deploy=true" >> $env:GITHUB_OUTPUT
          Write-Host "Deploying instance: $instanceName"
        } else {
          Write-Output "deploy=false" >> $env:GITHUB_OUTPUT  
          Write-Host "Skipping instance: $instanceName"
        }
      shell: powershell -ExecutionPolicy Bypass
        
    - name: Checkout code
      if: steps.should_deploy.outputs.deploy == 'true'
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      if: steps.should_deploy.outputs.deploy == 'true'
      uses: actions/download-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        
    - name: Stop IIS Website and App Pool
      if: steps.should_deploy.outputs.deploy == 'true'
      shell: powershell -ExecutionPolicy Bypass
      run: |
        $siteName = "MovieReview${{ matrix.instance.name == 'adult' && '' || matrix.instance.name }}"
        $appPoolName = "MovieReview${{ matrix.instance.name == 'adult' && '' || matrix.instance.name }}"
        
        Write-Host "Stopping IIS site: $siteName"
        try {
          if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
            Stop-Website -Name $siteName
            Write-Host "Website $siteName stopped"
          } else {
            Write-Host "Website $siteName does not exist"
          }
          
          if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
            Stop-WebAppPool -Name $appPoolName
            Write-Host "App pool $appPoolName stopped"
          } else {
            Write-Host "App pool $appPoolName does not exist"
          }
        } catch {
          Write-Host "Warning: Could not stop IIS resources: $($_.Exception.Message)"
        }
        
        # Wait for processes to stop
        Start-Sleep -Seconds 10
        
    - name: Deploy to IIS Directory
      if: steps.should_deploy.outputs.deploy == 'true'
      shell: powershell -ExecutionPolicy Bypass
      run: |
        $instanceName = "${{ matrix.instance.name }}"
        $deployPath = "C:\inetpub\wwwroot\MovieReview$(if ($instanceName -ne 'adult') { $instanceName })"
        $sourcePath = "${{ env.PUBLISH_OUTPUT }}"
        
        Write-Host "Deploying to: $deployPath"
        Write-Host "From: $sourcePath"
        
        # Create deployment directory if it doesn't exist
        if (-not (Test-Path $deployPath)) {
          New-Item -Path $deployPath -ItemType Directory -Force
          Write-Host "Created deployment directory: $deployPath"
        }
        
        # Backup existing deployment
        $backupPath = "$deployPath.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        if (Test-Path "$deployPath\MovieReviewApp.dll") {
          Write-Host "Creating backup: $backupPath"
          Copy-Item -Path $deployPath -Destination $backupPath -Recurse -Force
        }
        
        # Copy new files
        Write-Host "Copying application files..."
        robocopy $sourcePath $deployPath /MIR /R:3 /W:5 /MT:4 /XD logs instances secrets temp uploads
        
        if ($LASTEXITCODE -ge 8) {
          Write-Error "File copy failed with exit code: $LASTEXITCODE"
          exit 1
        }
        
        Write-Host "Application files deployed successfully"
        
    - name: Configure web.config for instance
      if: steps.should_deploy.outputs.deploy == 'true'
      shell: powershell -ExecutionPolicy Bypass
      run: |
        $instanceName = "${{ matrix.instance.name }}"
        $deployPath = "C:\inetpub\wwwroot\MovieReview$(if ($instanceName -ne 'adult') { $instanceName })"
        $webConfigPath = "$deployPath\web.config"
        
        # Create web.config with instance-specific configuration
        $webConfig = '<?xml version="1.0" encoding="utf-8"?><configuration><location path="." inheritInChildApplications="false"><system.webServer><handlers><add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" /></handlers><aspNetCore processPath="dotnet" arguments=".\MovieReviewApp.dll --instance ${{ matrix.instance.name }} --port ${{ matrix.instance.port }}" stdoutLogEnabled="true" stdoutLogFile=".\logs\stdout" hostingModel="InProcess"><environmentVariables><environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" /><environmentVariable name="MOVIEREVIEW_INSTANCE_NAME" value="${{ matrix.instance.name }}" /><environmentVariable name="MOVIEREVIEW_DISPLAY_NAME" value="${{ matrix.instance.display_name }}" /><environmentVariable name="MOVIEREVIEW_ENVIRONMENT" value="${{ matrix.instance.environment }}" /></environmentVariables></aspNetCore></system.webServer></location></configuration>'
        
        Write-Host "Creating web.config for instance: $instanceName"
        $webConfig | Out-File -FilePath $webConfigPath -Encoding UTF8
        Write-Host "web.config created successfully"
        
    - name: Set directory permissions
      if: steps.should_deploy.outputs.deploy == 'true'
      shell: powershell -ExecutionPolicy Bypass
      run: |
        $instanceName = "${{ matrix.instance.name }}"
        $deployPath = "C:\inetpub\wwwroot\MovieReview$(if ($instanceName -ne 'adult') { $instanceName })"
        
        Write-Host "Setting permissions for: $deployPath"
        
        # Create required directories that the application expects
        $requiredDirs = @(
          "$deployPath\logs",
          "$deployPath\wwwroot\uploads\pending",
          "$deployPath\wwwroot\clips",
          "$deployPath\wwwroot\sounds",
          "$deployPath\wwwroot\temp",
          "$deployPath\wwwroot\uploads"
        )
        
        foreach ($dir in $requiredDirs) {
          if (-not (Test-Path $dir)) {
            New-Item -Path $dir -ItemType Directory -Force
            Write-Host "Created directory: $dir"
          }
        }
        
        # Grant IIS_IUSRS full control to the main deployment directory
        icacls $deployPath /grant "IIS_IUSRS:(OI)(CI)F" /T /C
        
        # Grant IIS_IUSRS full control to wwwroot subdirectories specifically
        $wwwrootPath = "$deployPath\wwwroot"
        if (Test-Path $wwwrootPath) {
          icacls $wwwrootPath /grant "IIS_IUSRS:(OI)(CI)F" /T /C
          Write-Host "Set permissions on wwwroot directory: $wwwrootPath"
        }
        
        Write-Host "Permissions set successfully"
        
    - name: Start IIS Website and App Pool
      if: steps.should_deploy.outputs.deploy == 'true'
      shell: powershell -ExecutionPolicy Bypass
      run: |
        $siteName = "MovieReview${{ matrix.instance.name == 'adult' && '' || matrix.instance.name }}"
        $appPoolName = "MovieReview${{ matrix.instance.name == 'adult' && '' || matrix.instance.name }}"
        
        Write-Host "Starting IIS resources for: $siteName"
        
        try {
          if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
            Start-WebAppPool -Name $appPoolName
            Write-Host "App pool $appPoolName started"
          } else {
            Write-Host "Warning: App pool $appPoolName does not exist"
          }
          
          if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
            Start-Website -Name $siteName
            Write-Host "Website $siteName started"
          } else {
            Write-Host "Warning: Website $siteName does not exist"
          }
        } catch {
          Write-Host "Warning: Could not start IIS resources: $($_.Exception.Message)"
        }
        
        # Wait for application to start
        Start-Sleep -Seconds 15
        
    - name: Health Check
      if: steps.should_deploy.outputs.deploy == 'true'
      shell: powershell -ExecutionPolicy Bypass
      run: |
        $port = ${{ matrix.instance.port }}
        $instanceName = "${{ matrix.instance.name }}"
        $healthUrl = "http://localhost:$port/api/health"
        $instanceHealthUrl = "http://localhost:$port/api/health/instance/$instanceName"
        
        Write-Host "Performing health checks for instance: $instanceName"
        Write-Host "Health URL: $healthUrl"
        Write-Host "Instance Health URL: $instanceHealthUrl"
        
        # Wait for application to be fully ready
        $maxAttempts = 12
        $attempt = 1
        $healthy = $false
        
        do {
          try {
            Write-Host "Health check attempt $attempt of $maxAttempts"
            
            # Basic health check
            $response = Invoke-RestMethod -Uri $healthUrl -Method Get -TimeoutSec 30
            Write-Host "Basic health check response: $($response | ConvertTo-Json -Compress)"
            
            # Instance-specific health check
            $instanceResponse = Invoke-RestMethod -Uri $instanceHealthUrl -Method Get -TimeoutSec 30
            Write-Host "Instance health check response: $($instanceResponse | ConvertTo-Json -Compress)"
            
            if ($response.isHealthy -and $instanceResponse.status -eq "healthy") {
              $healthy = $true
              Write-Host "✅ Health checks passed for instance: $instanceName"
              break
            } else {
              Write-Host "❌ Health checks failed - Application not healthy"
            }
          } catch {
            Write-Host "Health check failed: $($_.Exception.Message)"
          }
          
          if ($attempt -lt $maxAttempts) {
            Write-Host "Waiting 10 seconds before retry..."
            Start-Sleep -Seconds 10
          }
          $attempt++
        } while ($attempt -le $maxAttempts)
        
        if (-not $healthy) {
          Write-Error "❌ Health checks failed for instance: $instanceName after $maxAttempts attempts"
          exit 1
        }

  deployment-summary:
    runs-on: windows-latest
    name: Deployment Summary
    needs: [deploy-to-self-hosted]
    if: always() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Generate deployment summary
      run: |
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "# 🎬 MovieReview Deployment Summary"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Deployment Environment:** ${{ github.event.inputs.deployment_environment || 'staging' }}"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Instances Requested:** ${{ github.event.inputs.instances_to_deploy || 'all' }}"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Triggered by:** ${{ github.event_name }}"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Commit:** ${{ github.sha }}"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## Instance Deployment Status"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "| Instance | Port | Status |"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "|----------|------|--------|"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "| Adult | 5010 | ${{ needs.deploy-to-self-hosted.result }} |"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "| Kids | 5012 | ${{ needs.deploy-to-self-hosted.result }} |"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "| Demo | 5015 | ${{ needs.deploy-to-self-hosted.result }} |"
        Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value ""
        
        if ("${{ needs.deploy-to-self-hosted.result }}" -eq "success") {
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "✅ **Deployment completed successfully!**"
        } else {
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "❌ **Deployment failed - check logs above**"
        }
      shell: powershell -ExecutionPolicy Bypass