name: Deploy MovieReview Multi-Instance

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      instances:
        description: 'Instances to deploy (comma-separated: friends:5010,kids:5012,demo:5015)'
        required: true
        default: 'friends:5010,kids:5012,demo:5015'
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './MovieReviewApp.sln'
  PROJECT_PATH: './MovieReviewApp/MovieReviewApp.csproj'
  PUBLISH_OUTPUT: './publish'
  DEPLOY_BASE_PATH: 'C:\inetpub\wwwroot\MovieReview'

jobs:
  build-and-test:
    runs-on: windows-latest
    name: Build and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal
      
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ${{ env.PUBLISH_OUTPUT }} --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        retention-days: 30

  deploy-instances:
    runs-on: self-hosted
    name: Deploy All Instances
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deployment_environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
    
    - name: Verify ASP.NET Core Hosting Bundle
      shell: powershell
      run: |
        Import-Module WebAdministration -ErrorAction SilentlyContinue
        $modules = Get-WebGlobalModule | Where-Object { $_.Name -like "AspNetCore*" }
        if ($modules) {
          Write-Host "ASP.NET Core Hosting Bundle is installed"
          $modules | ForEach-Object { Write-Host "  - $($_.Name)" }
        } else {
          Write-Error "ASP.NET Core Hosting Bundle is NOT installed! Please install it first."
          exit 1
        }
        
    - name: Deploy Instances
      shell: powershell
      run: |
        Import-Module WebAdministration
        
        $instancesInput = "${{ github.event.inputs.instances }}"
        if ([string]::IsNullOrWhiteSpace($instancesInput)) {
          $instancesInput = "friends:5010,kids:5012,demo:5015"
        }
        
        Write-Host "================================================"
        Write-Host "Deploying MovieReview Instances"
        Write-Host "================================================"
        Write-Host "Instances to deploy: $instancesInput"
        
        $instances = $instancesInput -split ',' | ForEach-Object {
          $parts = $_ -split ':'
          @{
            Name = $parts[0].Trim()
            Port = [int]$parts[1].Trim()
          }
        }
        
        Write-Host "Stopping all MovieReview instances..."
        Get-Website | Where-Object { $_.Name -like "MovieReview-*" } | ForEach-Object {
          Write-Host "Stopping website: $($_.Name)"
          try {
            Stop-Website -Name $_.Name -ErrorAction Stop
          } catch {
            Write-Host "  Website already stopped or error: $_"
          }
        }
        
        Get-IISAppPool | Where-Object { $_.Name -like "MovieReview-*" } | ForEach-Object {
          Write-Host "Stopping app pool: $($_.Name)"
          try {
            if ((Get-WebAppPoolState -Name $_.Name).Value -ne "Stopped") {
              Stop-WebAppPool -Name $_.Name -ErrorAction Stop
            } else {
              Write-Host "  App pool already stopped"
            }
          } catch {
            Write-Host "  App pool already stopped or error: $_"
          }
        }
        
        Start-Sleep -Seconds 5
        
        foreach ($instance in $instances) {
          $instanceName = $instance.Name
          $instancePort = $instance.Port
          $deployPath = "${{ env.DEPLOY_BASE_PATH }}\$instanceName"
          $dataPath = "$deployPath\data"
          $logsPath = "$deployPath\logs"
          $siteName = "MovieReview-$instanceName"
          $appPoolName = "MovieReview-$instanceName"
          
          Write-Host ""
          Write-Host "================================================"
          Write-Host "Deploying Instance: $instanceName"
          Write-Host "================================================"
          Write-Host "Port: $instancePort"
          Write-Host "Path: $deployPath"
          
          Write-Host "Creating directories..."
          New-Item -Path $deployPath -ItemType Directory -Force | Out-Null
          New-Item -Path $dataPath -ItemType Directory -Force | Out-Null
          New-Item -Path $logsPath -ItemType Directory -Force | Out-Null
          
          Write-Host "Copying application files..."
          robocopy "${{ env.PUBLISH_OUTPUT }}" $deployPath /E /PURGE /R:2 /W:2 /NFL /NDL /NJH /NJS /XD logs data
          $robocopyExitCode = $LASTEXITCODE
          
          if ($robocopyExitCode -ge 8) {
            Write-Error "Robocopy failed with exit code: $robocopyExitCode"
            exit 1
          }
          Write-Host "Files deployed successfully"
          
          Write-Host "Creating web.config..."
          $webConfig = @"
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet" arguments=".\MovieReviewApp.dll" stdoutLogEnabled="true" stdoutLogFile=".\logs\stdout" hostingModel="InProcess">
                <environmentVariables>
                  <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
                  <environmentVariable name="ASPNETCORE_IIS_HTTPAUTH" value="windows" />
                  <environmentVariable name="MOVIEREVIEW_INSTANCE" value="$instanceName" />
                  <environmentVariable name="MOVIEREVIEW_PORT" value="$instancePort" />
                  <environmentVariable name="MOVIEREVIEW_DATA_PATH" value="$dataPath" />
                </environmentVariables>
              </aspNetCore>
              <security>
                <requestFiltering>
                  <requestLimits maxAllowedContentLength="10737418240" />
                </requestFiltering>
              </security>
            </system.webServer>
          </location>
        </configuration>
        "@
          
          $webConfig | Out-File -FilePath "$deployPath\web.config" -Encoding UTF8
          Write-Host "web.config created"
          
          # Remove existing app pool if it exists
          if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
            try {
              Remove-WebAppPool -Name $appPoolName
              Write-Host "Removed existing app pool"
            } catch {
              Write-Host "Could not remove app pool: $_"
            }
          }
          
          # Remove existing website if it exists  
          if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
            try {
              Remove-Website -Name $siteName
              Write-Host "Removed existing website"
            } catch {
              Write-Host "Could not remove website: $_"
            }
          }
          
          Write-Host "Creating IIS Application Pool..."
          New-WebAppPool -Name $appPoolName
          
          Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "managedRuntimeVersion" -Value ""
          Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "enable32BitAppOnWin64" -Value $false
          Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "processModel.identityType" -Value "ApplicationPoolIdentity"
          Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "recycling.periodicRestart.time" -Value "00:00:00"
          Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "startMode" -Value "AlwaysRunning"
          Write-Host "App pool configured"
          
          Write-Host "Creating IIS Website..."
          New-Website -Name $siteName -Port $instancePort -PhysicalPath $deployPath -ApplicationPool $appPoolName
          Write-Host "Website created on port $instancePort"
          
          Write-Host "Setting permissions..."
          icacls $deployPath /grant "IIS AppPool\${appPoolName}:(OI)(CI)F" /T /Q
          icacls $deployPath /grant "IIS_IUSRS:(OI)(CI)F" /T /Q
          Write-Host "Permissions configured"
          
          Write-Host "Starting IIS resources..."
          Start-WebAppPool -Name $appPoolName
          Start-Website -Name $siteName
          Write-Host "Started app pool and website"
          
          Write-Host "Instance $instanceName deployed successfully!"
        }
        
        Write-Host ""
        Write-Host "================================================"
        Write-Host "All instances deployed!"
        Write-Host "================================================"
        
    - name: Verify Deployments
      shell: powershell
      run: |
        $instancesInput = "${{ github.event.inputs.instances }}"
        if ([string]::IsNullOrWhiteSpace($instancesInput)) {
          $instancesInput = "friends:5010,kids:5012,demo:5015"
        }
        
        $instances = $instancesInput -split ',' | ForEach-Object {
          $parts = $_ -split ':'
          @{
            Name = $parts[0].Trim()
            Port = [int]$parts[1].Trim()
          }
        }
        
        Write-Host ""
        Write-Host "Verifying deployments..."
        Write-Host "========================"
        
        Start-Sleep -Seconds 10
        
        $failed = $false
        foreach ($instance in $instances) {
          $url = "http://localhost:$($instance.Port)"
          Write-Host ""
          Write-Host "Testing $($instance.Name) at $url"
          
          $maxAttempts = 5
          $attempt = 0
          $success = $false
          
          while ($attempt -lt $maxAttempts -and -not $success) {
            $attempt++
            try {
              $response = Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec 30
              if ($response.StatusCode -eq 200) {
                Write-Host "SUCCESS: $($instance.Name) is responding (HTTP $($response.StatusCode))"
                $success = $true
              }
            } catch {
              Write-Host "  Attempt $attempt/$maxAttempts failed: $($_.Exception.Message)"
              if ($attempt -lt $maxAttempts) {
                Start-Sleep -Seconds 5
              }
            }
          }
          
          if (-not $success) {
            Write-Host "FAILED: $($instance.Name) failed to respond"
            
            $logPath = "${{ env.DEPLOY_BASE_PATH }}\$($instance.Name)\logs"
            if (Test-Path $logPath) {
              $logFiles = Get-ChildItem -Path $logPath -Filter "stdout*.log" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
              if ($logFiles) {
                Write-Host "  Recent logs from $($logFiles[0].Name):"
                Get-Content $logFiles[0].FullName -Tail 10 | ForEach-Object { Write-Host "    $_" }
              }
            }
            
            $failed = $true
          }
        }
        
        if ($failed) {
          Write-Error "Some instances failed verification"
          exit 1
        }
        
        Write-Host ""
        Write-Host "All instances are running!"
        Write-Host ""
        Write-Host "Access your instances at:"
        foreach ($instance in $instances) {
          Write-Host "  $($instance.Name): http://localhost:$($instance.Port)"
        }