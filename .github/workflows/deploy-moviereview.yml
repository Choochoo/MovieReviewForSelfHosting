name: Deploy MovieReview Multi-Instance

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      instances_to_deploy:
        description: 'Instances to deploy (JSON array format: [{"name":"instance1","port":5010},{"name":"instance2","port":5012}])'
        required: true
        default: '[{"name":"friends","port":5010},{"name":"kids","port":5012},{"name":"demo","port":5015}]'
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './MovieReviewApp.sln'
  PROJECT_PATH: './MovieReviewApp/MovieReviewApp.csproj'
  PUBLISH_OUTPUT: './publish'

jobs:
 parse-instances:
    runs-on: windows-latest
    outputs:
      instances: ${{ steps.parse.outputs.instances }}
    steps:
    - name: Parse instance configuration
      id: parse
      shell: powershell
      run: |
        $instancesInput = '${{ github.event.inputs.instances_to_deploy }}'
        
        # Default instances if not provided
        if ([string]::IsNullOrWhiteSpace($instancesInput)) {
          $instancesInput = '[{"name":"friends","port":5010},{"name":"kids","port":5012},{"name":"demo","port":5015}]'
        }
        
        # Validate JSON
        try {
          $instances = $instancesInput | ConvertFrom-Json
          Write-Host "Parsed instances: $($instances | ConvertTo-Json -Compress)"
          
          # Output for matrix
          "instances=$instancesInput" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        } catch {
          Write-Error "Invalid JSON format for instances"
          exit 1
        }

  build-and-test:
    runs-on: windows-latest
    name: Build and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal
      
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ${{ env.PUBLISH_OUTPUT }} --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        retention-days: 30

  deploy-to-self-hosted:
    runs-on: self-hosted
    name: Deploy to IIS
    needs: [build-and-test, parse-instances]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deployment_environment || 'staging' }}
    
    strategy:
      matrix:
        instance: ${{ fromJson(needs.parse-instances.outputs.instances) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        
    - name: Stop IIS Website and App Pool
      shell: cmd
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command @'
        $instanceName = '${{ matrix.instance.name }}'
        $siteName = "MovieReview_$instanceName"
        $appPoolName = "MovieReview_$instanceName"
        
        Write-Host "Stopping IIS site: $siteName"
        try {
          if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
            Stop-Website -Name $siteName
            Write-Host "Website stopped"
          } else {
            Write-Host "Website does not exist"
          }
          
          if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
            Stop-WebAppPool -Name $appPoolName
            Write-Host "App pool stopped"
          } else {
            Write-Host "App pool does not exist"
          }
        } catch {
          Write-Host "Warning: Could not stop IIS resources: $_"
        }
        
        # Ensure processes are stopped
        Start-Sleep -Seconds 10
        '@
        
    - name: Deploy to IIS Directory
      shell: cmd
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command @'
        $instanceName = '${{ matrix.instance.name }}'
        $deployPath = "C:\inetpub\wwwroot\MovieReview_$instanceName"
        $sourcePath = '${{ env.PUBLISH_OUTPUT }}'
        
        Write-Host "Deploying to: $deployPath"
        Write-Host "From: $sourcePath"
        
        # Create directory if it doesn't exist
        if (-not (Test-Path $deployPath)) {
          New-Item -Path $deployPath -ItemType Directory -Force
          Write-Host "Created deployment directory"
        }
        
        # Create backup
        $backupPath = "${deployPath}.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        if (Test-Path "$deployPath\MovieReviewApp.dll") {
          Write-Host "Creating backup: $backupPath"
          Copy-Item -Path $deployPath -Destination $backupPath -Recurse -Force
        }
        
        # Copy files
        Write-Host "Copying application files..."
        robocopy $sourcePath $deployPath /MIR /R:3 /W:5 /MT:4 /XD logs instances secrets temp uploads
        
        if ($LASTEXITCODE -ge 8) {
          Write-Error "File copy failed"
          exit 1
        }
        
        Write-Host "Application files deployed successfully"
        '@
        
    - name: Configure web.config for instance
      shell: cmd
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command @'
        $instanceName = '${{ matrix.instance.name }}'
        $instancePort = '${{ matrix.instance.port }}'
        $deployPath = "C:\inetpub\wwwroot\MovieReview_$instanceName"
        $webConfigPath = Join-Path $deployPath 'web.config'
        
        $webConfig = @"
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet" arguments=".\MovieReviewApp.dll" stdoutLogEnabled="true" stdoutLogFile=".\logs\stdout" hostingModel="InProcess">
                <environmentVariables>
                  <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
                  <environmentVariable name="MOVIEREVIEW_INSTANCE_NAME" value="$instanceName" />
                  <environmentVariable name="MOVIEREVIEW_PORT" value="$instancePort" />
                </environmentVariables>
              </aspNetCore>
            </system.webServer>
          </location>
        </configuration>
        "@
        
        Write-Host "Creating web.config for instance: $instanceName"
        $webConfig | Out-File -FilePath $webConfigPath -Encoding UTF8
        Write-Host "web.config created successfully"
        '@
        
    - name: Create/Update IIS Site
      shell: cmd
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command @'
        Import-Module WebAdministration
        
        $instanceName = '${{ matrix.instance.name }}'
        $instancePort = '${{ matrix.instance.port }}'
        $siteName = "MovieReview_$instanceName"
        $appPoolName = "MovieReview_$instanceName"
        $physicalPath = "C:\inetpub\wwwroot\MovieReview_$instanceName"
        
        # Create App Pool if it doesn't exist
        if (-not (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue)) {
          New-WebAppPool -Name $appPoolName
          Write-Host "Created app pool: $appPoolName"
        }
        
        # Configure App Pool
        Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name processIdentity.identityType -Value ApplicationPoolIdentity
        Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name managedRuntimeVersion -Value ""
        
        # Create Website if it doesn't exist
        if (-not (Get-Website -Name $siteName -ErrorAction SilentlyContinue)) {
          New-Website -Name $siteName -Port $instancePort -PhysicalPath $physicalPath -ApplicationPool $appPoolName
          Write-Host "Created website: $siteName on port $instancePort"
        } else {
          # Update existing site
          Set-ItemProperty -Path "IIS:\Sites\$siteName" -Name physicalPath -Value $physicalPath
          Set-ItemProperty -Path "IIS:\Sites\$siteName" -Name applicationPool -Value $appPoolName
          
          # Update binding
          Get-WebBinding -Name $siteName | Remove-WebBinding
          New-WebBinding -Name $siteName -Protocol "http" -Port $instancePort -IPAddress "*"
          Write-Host "Updated website: $siteName"
        }
        '@
        
    - name: Set directory permissions
      shell: cmd
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command @'
        $instanceName = '${{ matrix.instance.name }}'
        $deployPath = "C:\inetpub\wwwroot\MovieReview_$instanceName"
        $appPoolName = "MovieReview_$instanceName"
        
        Write-Host "Setting permissions for: $deployPath"
        
        # Create required directories
        $requiredDirs = @('logs', 'wwwroot\uploads\pending', 'wwwroot\clips', 'wwwroot\sounds', 'wwwroot\temp', 'wwwroot\uploads')
        foreach ($dir in $requiredDirs) {
          $fullDir = Join-Path $deployPath $dir
          if (-not (Test-Path $fullDir)) {
            New-Item -Path $fullDir -ItemType Directory -Force
            Write-Host "Created directory: $fullDir"
          }
        }
        
        # Set permissions for app pool identity
        $appPoolSid = (New-Object System.Security.Principal.SecurityIdentifier("S-1-5-82")).Translate([System.Security.Principal.NTAccount])
        $appPoolIdentity = "IIS AppPool\$appPoolName"
        
        icacls $deployPath /grant "${appPoolIdentity}:(OI)(CI)F" /T /C
        icacls $deployPath /grant "IIS_IUSRS:(OI)(CI)F" /T /C
        
        Write-Host "Permissions set successfully"
        '@
        
    - name: Start IIS Website and App Pool
      shell: cmd
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command @'
        $instanceName = '${{ matrix.instance.name }}'
        $siteName = "MovieReview_$instanceName"
        $appPoolName = "MovieReview_$instanceName"
        
        Write-Host "Starting IIS resources for: $siteName"
        
        try {
          Start-WebAppPool -Name $appPoolName
          Write-Host "App pool started"
          
          Start-Website -Name $siteName
          Write-Host "Website started"
        } catch {
          Write-Host "Warning: Could not start IIS resources: $_"
        }
        
        Start-Sleep -Seconds 20
        '@
        
    - name: Health Check
      shell: cmd
      run: |
        powershell -NoProfile -ExecutionPolicy Bypass -Command @'
        $instanceName = '${{ matrix.instance.name }}'
        $instancePort = '${{ matrix.instance.port }}'
        $healthUrl = "http://localhost:$instancePort/api/health"
        $instanceHealthUrl = "http://localhost:$instancePort/api/health/instance/$instanceName"
        
        Write-Host "Performing health checks for instance: $instanceName"
        Write-Host "Health URL: $healthUrl"
        Write-Host "Instance Health URL: $instanceHealthUrl"
        
        $maxAttempts = 12
        $attempt = 1
        $healthy = $false
        
        do {
          try {
            Write-Host "Health check attempt $attempt of $maxAttempts"
            
            $response = Invoke-RestMethod -Uri $healthUrl -Method Get -TimeoutSec 30
            Write-Host "Basic health check response: $($response | ConvertTo-Json -Compress)"
            
            $instanceResponse = Invoke-RestMethod -Uri $instanceHealthUrl -Method Get -TimeoutSec 30
            Write-Host "Instance health check response: $($instanceResponse | ConvertTo-Json -Compress)"
            
            if ($response.isHealthy -and $instanceResponse.status -eq 'healthy') {
              $healthy = $true
              Write-Host "Health checks passed for instance: $instanceName"
              break
            } else {
              Write-Host "Health checks failed - Application not healthy"
            }
          } catch {
            Write-Host "Health check failed: $_"
          }
          
          if ($attempt -lt $maxAttempts) {
            Write-Host "Waiting 10 seconds before retry..."
            Start-Sleep -Seconds 10
          }
          
          $attempt++
        } while ($attempt -le $maxAttempts)
        
        if (-not $healthy) {
          # Check logs before failing
          $logsPath = "C:\inetpub\wwwroot\MovieReview_$instanceName\logs\stdout*.log"
          Write-Host "Checking logs at: $logsPath"
          if (Test-Path $logsPath) {
            Get-Content $logsPath -Tail 50 | Write-Host
          }
          
          Write-Error "Health checks failed for instance: $instanceName after $maxAttempts attempts"
          exit 1
        }
        '@