name: Deploy MovieReview Multi-Instance

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      instances:
        description: 'Instances to deploy (comma-separated: friends:5010,kids:5012,demo:5015)'
        required: true
        default: 'friends:5010,kids:5012,demo:5015'
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: './MovieReviewApp.sln'
  PROJECT_PATH: './MovieReviewApp/MovieReviewApp.csproj'
  PUBLISH_OUTPUT: './publish'
  DEPLOY_BASE_PATH: 'C:\inetpub\wwwroot\MovieReview'

jobs:
  build-and-test:
    runs-on: windows-latest
    name: Build and Test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
      
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal
      
    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_PATH }} --configuration Release --output ${{ env.PUBLISH_OUTPUT }} --no-build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        retention-days: 30

  deploy-instances:
    runs-on: self-hosted
    name: Deploy All Instances
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.deployment_environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: moviereview-build
        path: ${{ env.PUBLISH_OUTPUT }}
        
    - name: Deploy instances
      shell: powershell
      run: |
        $instancesInput = '${{ github.event.inputs.instances }}'
        if ([string]::IsNullOrWhiteSpace($instancesInput)) {
          $instancesInput = 'friends:5010,kids:5012,demo:5015'
        }
        
        Write-Host "Deploying instances: $instancesInput"
        
        # Parse instances
        $instances = $instancesInput -split ',' | ForEach-Object {
          $parts = $_ -split ':'
          @{
            Name = $parts[0].Trim()
            Port = [int]$parts[1].Trim()
          }
        }
        
        foreach ($instance in $instances) {
          $instanceName = $instance.Name
          $instancePort = $instance.Port
          $deployPath = "$env:DEPLOY_BASE_PATH\$instanceName"
          $dataPath = "$deployPath\data"
          $siteName = "MovieReview-$instanceName"
          $appPoolName = "MovieReview-$instanceName"
          
          Write-Host "=== Deploying Instance: $instanceName on port $instancePort ==="
          
          # Stop IIS resources first
          Write-Host "Stopping IIS resources..."
          try {
            Import-Module WebAdministration
            if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
              Stop-Website -Name $siteName
              Write-Host "Stopped website: $siteName"
            }
            if (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue) {
              Stop-WebAppPool -Name $appPoolName
              Write-Host "Stopped app pool: $appPoolName"
            }
            Start-Sleep -Seconds 5
          } catch {
            Write-Host "IIS resources may not exist yet: $_"
          }
          
          # Create directories
          Write-Host "Creating directories..."
          New-Item -Path $deployPath -ItemType Directory -Force | Out-Null
          New-Item -Path $dataPath -ItemType Directory -Force | Out-Null
          New-Item -Path "$deployPath\logs" -ItemType Directory -Force | Out-Null
          
          # Deploy files
          Write-Host "Deploying files to: $deployPath"
          $robocopyResult = robocopy "$env:PUBLISH_OUTPUT" $deployPath /MIR /R:1 /W:1 /NFL /NDL /NJH /NJS
          $robocopyExitCode = $LASTEXITCODE
          
          # Robocopy exit codes: 0=no change, 1=files copied, 2=extra files/dirs found, 4=mismatched files/dirs
          # Exit codes 0-7 are success, 8+ are errors
          if ($robocopyExitCode -ge 8) {
            Write-Error "File deployment failed for $instanceName with exit code: $robocopyExitCode"
            exit 1
          } else {
            Write-Host "Files deployed successfully for $instanceName"
          }
          
          # Reset PowerShell's last exit code
          $global:LASTEXITCODE = 0
          
          # Create web.config with CORRECT environment variables
          $webConfig = @"
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet" arguments=".\MovieReviewApp.dll" stdoutLogEnabled="true" stdoutLogFile=".\logs\stdout" hostingModel="InProcess">
                <environmentVariables>
                  <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
                  <environmentVariable name="MOVIEREVIEW_INSTANCE" value="$instanceName" />
                  <environmentVariable name="MOVIEREVIEW_PORT" value="$instancePort" />
                  <environmentVariable name="MOVIEREVIEW_DATA_PATH" value="$dataPath" />
                </environmentVariables>
              </aspNetCore>
            </system.webServer>
          </location>
        </configuration>
        "@
          
          $webConfig | Out-File -FilePath "$deployPath\web.config" -Encoding UTF8
          Write-Host "Created web.config for instance: $instanceName"
          
          # Setup IIS App Pool
          try {
            if (-not (Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue)) {
              New-WebAppPool -Name $appPoolName
              Write-Host "Created app pool: $appPoolName"
            } else {
              Write-Host "App pool already exists: $appPoolName"
            }
            
            # Configure app pool settings
            Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "processModel.identityType" -Value "ApplicationPoolIdentity"
            Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "managedRuntimeVersion" -Value ""
            Set-ItemProperty -Path "IIS:\AppPools\$appPoolName" -Name "recycling.periodicRestart.time" -Value "00:00:00" # Disable periodic restart
            Write-Host "Configured app pool settings"
          } catch {
            Write-Error "Failed to setup app pool for ${instanceName}: $_"
            exit 1
          }
          
          # Setup IIS Website
          try {
            # Remove existing website if it exists
            if (Get-Website -Name $siteName -ErrorAction SilentlyContinue) {
              Remove-Website -Name $siteName
              Write-Host "Removed existing website: $siteName"
            }
            
            # Create new website
            New-Website -Name $siteName -Port $instancePort -PhysicalPath $deployPath -ApplicationPool $appPoolName
            Write-Host "Created website: $siteName on port $instancePort"
          } catch {
            Write-Error "Failed to setup website for ${instanceName}: $_"
            exit 1
          }
          
          # Set permissions
          Write-Host "Setting permissions..."
          $appPoolIdentity = "IIS AppPool\$appPoolName"
          try {
            icacls $deployPath /grant "${appPoolIdentity}:(OI)(CI)F" /T /Q
            icacls $deployPath /grant "IIS_IUSRS:(OI)(CI)F" /T /Q
            Write-Host "Permissions set successfully"
          } catch {
            Write-Host "Warning: Could not set specific permissions, trying fallback..."
            icacls $deployPath /grant "Everyone:(OI)(CI)F" /T /Q
          }
          
          # Start IIS resources
          Write-Host "Starting IIS resources..."
          try {
            Start-WebAppPool -Name $appPoolName
            Write-Host "Started app pool: $appPoolName"
            
            Start-Website -Name $siteName
            Write-Host "Started website: $siteName"
          } catch {
            Write-Error "Failed to start IIS resources for ${instanceName}: $_"
            exit 1
          }
          
          Write-Host "Instance $instanceName deployed successfully!"
          Write-Host "  URL: http://localhost:$instancePort"
          Write-Host "  Deploy Path: $deployPath"
          Write-Host "  Data Path: $dataPath"
          Write-Host ""
          
          # Give the instance a moment to start
          Start-Sleep -Seconds 3
        }
        
        Write-Host "All instances deployed successfully!"
        
    - name: Health check all instances
      shell: powershell
      run: |
        $instancesInput = '${{ github.event.inputs.instances }}'
        if ([string]::IsNullOrWhiteSpace($instancesInput)) {
          $instancesInput = 'friends:5010,kids:5012,demo:5015'
        }
        
        # Parse instances
        $instances = $instancesInput -split ',' | ForEach-Object {
          $parts = $_ -split ':'
          @{
            Name = $parts[0].Trim()
            Port = [int]$parts[1].Trim()
          }
        }
        
        Write-Host "Starting health checks..."
        $allHealthy = $true
        
        foreach ($instance in $instances) {
          $instanceName = $instance.Name
          $instancePort = $instance.Port
          $healthUrl = "http://localhost:$instancePort"
          
          Write-Host "Health checking $instanceName at $healthUrl..."
          
          $attempts = 0
          $maxAttempts = 10
          $healthy = $false
          
          do {
            $attempts++
            try {
              $response = Invoke-WebRequest -Uri $healthUrl -TimeoutSec 30 -UseBasicParsing
              if ($response.StatusCode -eq 200) {
                Write-Host "✓ $instanceName is healthy (attempt $attempts)"
                $healthy = $true
                break
              }
            } catch {
              Write-Host "Attempt $attempts/$maxAttempts failed for ${instanceName}: $($_.Exception.Message)"
              if ($attempts -lt $maxAttempts) {
                Write-Host "Waiting 10 seconds before retry..."
                Start-Sleep -Seconds 10
              }
            }
          } while ($attempts -lt $maxAttempts)
          
          if (-not $healthy) {
            Write-Host "✗ $instanceName failed health check after $maxAttempts attempts"
            
            # Show some diagnostic info
            $siteName = "MovieReview-$instanceName"
            $appPoolName = "MovieReview-$instanceName"
            
            try {
              $site = Get-Website -Name $siteName -ErrorAction SilentlyContinue
              $appPool = Get-IISAppPool -Name $appPoolName -ErrorAction SilentlyContinue
              
              Write-Host "Diagnostic info for ${instanceName}:"
              Write-Host "  Website state: $($site.State)"
              Write-Host "  App pool state: $($appPool.State)"
              
              # Check logs
              $logPath = "$env:DEPLOY_BASE_PATH\$instanceName\logs\stdout*.log"
              if (Test-Path $logPath) {
                Write-Host "  Recent log entries:"
                Get-Content $logPath -Tail 5 | ForEach-Object { Write-Host "    $_" }
              } else {
                Write-Host "  No log files found at: $logPath"
              }
            } catch {
              Write-Host "  Could not get diagnostic info: $_"
            }
            
            $allHealthy = $false
          }
        }
        
        if (-not $allHealthy) {
          Write-Error "One or more instances failed health checks"
          exit 1
        }
        
        Write-Host ""
        Write-Host "🎬 All instances are healthy and ready!"
        Write-Host "Deployed instances:"
        foreach ($instance in $instances) {
          Write-Host "  - $($instance.Name): http://localhost:$($instance.Port)"
        }