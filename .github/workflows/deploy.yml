name: Deploy to Windows Server

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.x' # or the version you are using

      - name: Publish
        run: dotnet publish -c Release -o ./published

      - name: Copy files via SCP
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $username = "${{ secrets.SERVER_USER }}"
          $password = "${{ secrets.SERVER_PASSWORD }}"
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          $sourcePath = "./published/*"
          $targetPath = "C:/Users/Jared/Documents/GitHub/MovieReviewApp/publish"

          # Copy files using SCP with additional logging
          Write-Host "Starting SCP file transfer..."
          scp -r -o StrictHostKeyChecking=no $sourcePath $username@${{ secrets.SERVER_HOST }}:$targetPath
          Write-Host "SCP file transfer completed."

      - name: Restart application
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $username = "${{ secrets.SERVER_USER }}"
          $password = "${{ secrets.SERVER_PASSWORD }}"
          $securePassword = ConvertTo-SecureString $password -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential($username, $securePassword)

          $sessionOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck

          # Establish SSH session and run commands with additional logging
          Write-Host "Establishing SSH session..."
          $sshCommand = @"
          Stop-Process -Name "MovieReviewApp" -Force -ErrorAction SilentlyContinue
          Start-Process "C:/Users/Jared/Documents/GitHub/MovieReviewApp/publish/MovieReviewApp.exe"
          "@

          ssh $username@${{ secrets.SERVER_HOST }} -o StrictHostKeyChecking=no $sshCommand
          Write-Host "SSH session completed."
