@page "/settings"
@using MovieReviewApp.Components.Partials

<PageTitle>Settings</PageTitle>
<h1>Settings</h1>

@if (demoProtection.IsDemoInstance)
{
    <div class="alert alert-warning mb-3">
        <i class="bi bi-exclamation-triangle"></i>
        <strong>Demo Mode:</strong> Most settings are read-only in demo mode. Theme changes can be previewed but won't be saved permanently.
    </div>
}

<div class="settings-container">
    <div class="settings-section">
        <h3 class="section-title" @onclick="ToggleGeneral">
            <i class="bi @(showGeneral ? "bi-chevron-down" : "bi-chevron-right")"></i>
            General Settings
        </h3>
        
        @if (showGeneral)
        {
            <div class="general-settings-content">
                <div class="settings-fields">
                    <div class="setting-field">
                        <label class="setting-label">Group Name</label>
                        <input type="text" @bind="GroupName" class="form-control" placeholder="Enter group name" />
                    </div>
                    
                    <div class="setting-field">
                        <label class="setting-label">Theme Style</label>
                        <InputSelect @bind-Value="SelectedGroupTheme" @bind-Value:after="OnThemeChanged" class="form-control">
                            @foreach (string theme in AvailableThemes)
                            {
                                string displayName = char.ToUpper(theme[0]) + theme.Substring(1);
                                <option value="@theme">@displayName</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="setting-field">
                        <label class="setting-label">Start Date</label>
                        <InputDate @bind-Value="StartDate" class="form-control" />
                    </div>

                    <div class="setting-field">
                        <label class="setting-label">Respect Order</label>
                        <div class="checkbox-group">
                            <input class="form-check-input" type="checkbox" @bind="RespectOrder" id="respectOrder">
                            <span class="text-muted">Maintain person selection order</span>
                        </div>
                    </div>
                    
                    <div class="setting-field">
                        <label class="setting-label">Occurrence</label>
                        <div class="occurrence-controls">
                            <span class="text-muted">Every</span>
                            <InputNumber @bind-Value="TimeCount" class="form-control number-input" />
                            <InputSelect @bind-Value="TimePeriod" class="form-control">
                                @foreach (var period in TimePeriods)
                                {
                                    <option value="@period.Value">@period.Value@(TimeCount > 1 ? "s" : "")</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                
                <div class="settings-save">
                    <button type="button" class="btn btn-primary" @onclick="async () => await SaveGeneralSettings()">
                        Save General Settings
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- People Management Section -->
    <div class="settings-section">
        <h3 class="section-title" @onclick="TogglePeople" style="cursor: pointer;">
            <i class="bi @(showPeople ? "bi-chevron-down" : "bi-chevron-right")"></i>
            People Management
        </h3>
        
        @if (showPeople)
        {
            <div class="people-table">
                <table class="table table-compact">
                    <thead>
                        <tr>
                            <th class="col-order">Order</th>
                            <th class="col-name">Name</th>
                            <th class="col-actions">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (People != null && People.Any())
                        {
                            @foreach (var person in People.OrderBy(p => p?.Order))
                            {
                                @if (person != null)
                                {
                                    <tr>
                                        <td class="col-order">
                                            <div class="order-controls">
                                                <span class="order-number">@person.Order</span>
                                                <div class="order-buttons">
                                                    <button type="button" class="btn btn-xs btn-outline-secondary"
                                                            @onclick="async () => await MoveUp(person)"
                                                            disabled="@(person.Order <= 1)">
                                                        ↑
                                                    </button>
                                                    <button type="button" class="btn btn-xs btn-outline-secondary"
                                                            @onclick="async () => await MoveDown(person)"
                                                            disabled="@(person.Order >= People.Count)">
                                                        ↓
                                                    </button>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="col-name">
                                            @if (person.IsEditing)
                                            {
                                                <input type="text" @bind="person.Name" class="form-control form-control-sm" />
                                            }
                                            else
                                            {
                                                <span class="person-name">@person.Name</span>
                                            }
                                        </td>
                                        <td class="col-actions">
                                            @if (person.IsEditing)
                                            {
                                                <i class="bi bi-check text-success" @onclick="async () => await Save(person)" title="Save" style="cursor: pointer; margin-right: 0.5rem; font-size: 1.2rem;"></i>
                                                <i class="bi bi-x text-secondary" @onclick="() => Cancel(person)" title="Cancel" style="cursor: pointer; font-size: 1.2rem;"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-pencil text-secondary" @onclick="() => Edit(person)" title="Edit" style="cursor: pointer; margin-right: 0.5rem; font-size: 1.2rem;"></i>
                                                <i class="bi bi-trash text-danger" @onclick="async () => await Delete(person)" title="Delete" style="cursor: pointer; font-size: 1.2rem;"></i>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3" class="text-center text-muted">No people added yet</td>
                            </tr>
                        }
                        <tr class="add-row">
                            <td class="col-order"></td>
                            <td class="col-name">
                                <input type="text" @bind="@NewPerson" class="form-control form-control-sm" placeholder="Enter new person's name" />
                            </td>
                            <td class="col-actions">
                                <i class="bi bi-plus text-primary" @onclick="async () => await AddPerson()" title="Add Person" style="cursor: pointer; font-size: 1.2rem;"></i>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        }
    </div>
    
    <!-- Award Settings Section -->
    <div class="settings-section">
        <h3 class="section-title" @onclick="ToggleAwards" style="cursor: pointer;">
            <i class="bi @(showAwards ? "bi-chevron-down" : "bi-chevron-right")"></i>
            Award Settings
        </h3>
        
        @if (showAwards)
        {
            <AwardSettings />
        }
    </div>

    <!-- Discussion Questions Section -->
    <div class="settings-section">
        <h3 class="section-title" @onclick="ToggleQuestions" style="cursor: pointer;">
            <i class="bi @(showQuestions ? "bi-chevron-down" : "bi-chevron-right")"></i>
            Discussion Questions
        </h3>
        
        @if (showQuestions)
        {
            <div class="questions-table">
                <table class="table table-compact">
                    <thead>
                        <tr>
                            <th class="col-order">Order</th>
                            <th class="col-question">Question</th>
                            <th class="col-active">Active</th>
                            <th class="col-actions">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (DiscussionQuestions != null && DiscussionQuestions.Any())
                        {
                            @foreach (var question in DiscussionQuestions.OrderBy(q => q?.Order))
                            {
                                @if (question != null)
                                {
                                    <tr class="@(question.IsActive ? "" : "inactive-question")">
                                        <td class="col-order">
                                            <div class="order-controls">
                                                <span class="order-number">@question.Order</span>
                                                <div class="order-buttons">
                                                    <button type="button" class="btn btn-xs btn-outline-secondary"
                                                            @onclick="async () => await MoveQuestionUp(question)"
                                                            disabled="@(question.Order <= 1)">
                                                        ↑
                                                    </button>
                                                    <button type="button" class="btn btn-xs btn-outline-secondary"
                                                            @onclick="async () => await MoveQuestionDown(question)"
                                                            disabled="@(question.Order >= DiscussionQuestions.Count)">
                                                        ↓
                                                    </button>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="col-question">
                                            @if (question.IsEditing)
                                            {
                                                <input type="text" @bind="question.Question" class="form-control form-control-sm" />
                                            }
                                            else
                                            {
                                                <span class="question-text">@question.Question</span>
                                            }
                                        </td>
                                        <td class="col-active">
                                            @if (question.IsEditing)
                                            {
                                                <input class="form-check-input" type="checkbox" @bind="question.IsActive" />
                                            }
                                            else
                                            {
                                                <span class="badge @(question.IsActive ? "bg-success" : "bg-secondary")">
                                                    @(question.IsActive ? "Active" : "Inactive")
                                                </span>
                                            }
                                        </td>
                                        <td class="col-actions">
                                            @if (question.IsEditing)
                                            {
                                                <i class="bi bi-check text-success" @onclick="async () => await SaveQuestion(question)" title="Save" style="cursor: pointer; margin-right: 0.5rem; font-size: 1.2rem;"></i>
                                                <i class="bi bi-x text-secondary" @onclick="async () => await CancelQuestionEdit(question)" title="Cancel" style="cursor: pointer; font-size: 1.2rem;"></i>
                                            }
                                            else
                                            {
                                                <i class="bi bi-pencil text-secondary" @onclick="() => EditQuestion(question)" title="Edit" style="cursor: pointer; margin-right: 0.5rem; font-size: 1.2rem;"></i>
                                                <i class="bi bi-trash text-danger" @onclick="async () => await DeleteQuestion(question)" title="Delete" style="cursor: pointer; font-size: 1.2rem;"></i>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center text-muted">No discussion questions added yet</td>
                            </tr>
                        }
                        <tr class="add-row">
                            <td class="col-order"></td>
                            <td class="col-question">
                                <input type="text" @bind="@NewQuestionText" class="form-control form-control-sm" placeholder="Enter new discussion question" />
                            </td>
                            <td class="col-active">
                                <input class="form-check-input" type="checkbox" @bind="NewQuestionIsActive" />
                            </td>
                            <td class="col-actions">
                                <i class="bi bi-plus text-primary" @onclick="async () => await AddQuestion()" title="Add Question" style="cursor: pointer; font-size: 1.2rem;"></i>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <div class="mt-2">
                <small class="text-muted">
                    <i class="bi bi-info-circle"></i>
                    These questions will be used on the Home page and extracted from audio transcripts during analysis.
                    Only active questions will be displayed and analyzed.
                </small>
            </div>
        }
    </div>

    <!-- Advanced Settings Section -->
    <div class="settings-section">
        <h3 class="section-title" @onclick="ToggleAdvanced" style="cursor: pointer;">
            <i class="bi @(showAdvanced ? "bi-chevron-down" : "bi-chevron-right")"></i>
            Advanced Settings
        </h3>
        
        @if (showAdvanced)
        {
            <div class="advanced-settings">
                <div class="api-key-section">
                    <h5>API Configuration</h5>
                    <p class="text-muted">Configure API keys for external services. Changes are saved to encrypted storage.</p>
                    
                    <div class="api-key-grid">
                        <div class="api-key-item">
                            <label class="api-label">OpenAI API Key:</label>
                            <div class="api-key-description">
                                <small class="text-muted">For AI text spicing features. <a href="https://platform.openai.com/api-keys" target="_blank" rel="noopener noreferrer">Get your key here <i class="bi bi-box-arrow-up-right"></i></a></small>
                            </div>
                            <div class="api-input-group">
                                <input type="@(showOpenAIKey ? "text" : "password")" 
                                       @bind="openAIApiKey" 
                                       class="form-control" 
                                       placeholder="sk-..." />
                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => showOpenAIKey = !showOpenAIKey">
                                    <i class="bi @(showOpenAIKey ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                                <button type="button" 
                                        class="btn @(IsOpenAIConfigured ? "btn-success" : "btn-secondary") btn-sm" 
                                        @onclick="() => SaveOpenAIApiKey()">
                                    @(IsOpenAIConfigured ? "Configured" : "Not Configured")
                                </button>
                            </div>
                        </div>
                        
                        <div class="api-key-item">
                            <label class="api-label">Claude API Key:</label>
                            <div class="api-key-description">
                                <small class="text-muted">Backup for AI text spicing features. <a href="https://console.anthropic.com/" target="_blank" rel="noopener noreferrer">Get your key here <i class="bi bi-box-arrow-up-right"></i></a></small>
                            </div>
                            <div class="api-input-group">
                                <input type="@(showClaudeKey ? "text" : "password")" 
                                       @bind="claudeApiKey" 
                                       class="form-control" 
                                       placeholder="sk-ant-..." />
                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => showClaudeKey = !showClaudeKey">
                                    <i class="bi @(showClaudeKey ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                                <button type="button" 
                                        class="btn @(IsClaudeConfigured ? "btn-success" : "btn-secondary") btn-sm" 
                                        @onclick="() => SaveClaudeApiKey()">
                                    @(IsClaudeConfigured ? "Configured" : "Not Configured")
                                </button>
                            </div>
                        </div>
                        
                        <div class="api-key-item">
                            <label class="api-label">TMDB API Key:</label>
                            <div class="api-key-description">
                                <small class="text-muted">For movie data and posters. <a href="https://www.themoviedb.org/settings/api" target="_blank" rel="noopener noreferrer">Get your free key here <i class="bi bi-box-arrow-up-right"></i></a></small>
                            </div>
                            <div class="api-input-group">
                                <input type="@(showTMDBKey ? "text" : "password")" 
                                       @bind="tmdbApiKey" 
                                       class="form-control" 
                                       placeholder="..." />
                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => showTMDBKey = !showTMDBKey">
                                    <i class="bi @(showTMDBKey ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                                <button type="button" 
                                        class="btn @(IsTMDBConfigured ? "btn-success" : "btn-secondary") btn-sm" 
                                        @onclick="() => SaveTMDBApiKey()">
                                    @(IsTMDBConfigured ? "Configured" : "Not Configured")
                                </button>
                            </div>
                        </div>

                        <div class="api-key-item">
                            <label class="api-label">Gladia API Key:</label>
                            <div class="api-key-description">
                                <small class="text-muted">For audio transcription features. <a href="https://gladia.io/" target="_blank" rel="noopener noreferrer">Get your key here <i class="bi bi-box-arrow-up-right"></i></a></small>
                            </div>
                            <div class="api-input-group">
                                <input type="@(showGladiaKey ? "text" : "password")" 
                                       @bind="gladiaApiKey" 
                                       class="form-control" 
                                       placeholder="..." />
                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => showGladiaKey = !showGladiaKey">
                                    <i class="bi @(showGladiaKey ? "bi-eye-slash" : "bi-eye")"></i>
                                </button>
                                <button type="button" 
                                        class="btn @(IsGladiaConfigured ? "btn-success" : "btn-secondary") btn-sm" 
                                        @onclick="() => SaveGladiaApiKey()">
                                    @(IsGladiaConfigured ? "Configured" : "Not Configured")
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(apiMessage))
                    {
                        <div class="alert @(apiMessageIsError ? "alert-danger" : "alert-success") mt-3">
                            @apiMessage
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

