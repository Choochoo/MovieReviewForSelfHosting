@page "/upload-audio"
@inject IWebHostEnvironment WebHostEnvironment
@using System.IO
@using System.Globalization

<h3>Upload Audio Files Version 2.1!</h3>

<InputFile OnChange="@LoadFiles" multiple accept=".mp3,.wav,.ogg,.aac,.m4a,.mp4" class="form-control-file mb-3" />

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@foreach (var file in uploadedFiles)
{
    <div class="mt-3">
        <strong>@file.FileName</strong>
        <div class="progress">
            <div class="progress-bar" role="progressbar" style="width: @file.UploadedPercentage%;" aria-valuenow="@file.UploadedPercentage" aria-valuemin="0" aria-valuemax="100">
                @file.UploadedPercentage.ToString("F1")%
            </div>
        </div>
        <small>@FormatBytes(file.UploadedBytes) / @FormatBytes(file.Size)</small>
    </div>
}

@code {
    private List<FileUploadProgress> uploadedFiles = new();
    private const int ChunkSize = 1024 * 1024; // 1 MB chunks
    private string errorMessage = string.Empty;

    private static readonly string[] AllowedExtensions = { ".mp3", ".wav", ".ogg", ".aac", ".m4a", ".mp4" };

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        errorMessage = string.Empty;
        var files = e.GetMultipleFiles(maximumFileCount: 10);
        uploadedFiles.Clear();

        foreach (var file in files)
        {
            if (IsAudioFile(file.Name))
            {
                uploadedFiles.Add(new FileUploadProgress(file.Name, file.Size));
            }
            else
            {
                errorMessage += $"{file.Name} is not a supported audio file. ";
            }
        }

        using var timer = new Timer(_ => InvokeAsync(StateHasChanged));
        timer.Change(TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(500));

        foreach (var file in files)
        {
            if (IsAudioFile(file.Name))
            {
                await UploadFile(file);
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private bool IsAudioFile(string fileName)
    {
        return AllowedExtensions.Contains(Path.GetExtension(fileName).ToLowerInvariant());
    }

    private async Task UploadFile(IBrowserFile file)
    {
        try
        {
            var uploadsFolder = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
            Directory.CreateDirectory(uploadsFolder);
            var filePath = Path.Combine(uploadsFolder, file.Name);

            using var stream = file.OpenReadStream(maxAllowedSize: 10L * 1024 * 1024 * 1024); // 10 GB
            using var fileStream = new FileStream(filePath, FileMode.Create);

            var buffer = new byte[ChunkSize];
            int bytesRead;
            var progress = uploadedFiles.First(f => f.FileName == file.Name);

            while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
            {
                await fileStream.WriteAsync(buffer.AsMemory(0, bytesRead));
                progress.UploadedBytes += bytesRead;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            errorMessage += $"Error uploading {file.Name}: {ex.Message}. ";
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return string.Format("{0:n1} {1}", number, suffixes[counter]);
    }

    private class FileUploadProgress
    {
        public string FileName { get; set; }
        public long Size { get; set; }
        public long UploadedBytes { get; set; }
        public double UploadedPercentage => (double)UploadedBytes / Size * 100;

        public FileUploadProgress(string fileName, long size)
        {
            FileName = fileName;
            Size = size;
        }
    }
}