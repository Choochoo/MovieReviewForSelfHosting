@page "/upload-audio"
@inject IWebHostEnvironment WebHostEnvironment
@inject MovieReviewService MovieReviewService
@inject MovieSessionService MovieSessionService
@using System.IO
@using System.Globalization
@using System.Text.RegularExpressions
@using MovieReviewApp.Models
@using MovieReviewApp.Services
@using MovieReviewApp.Database
@inject MongoDbService MongoDbService

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">🎤 Movie Session Upload</h3>
        </div>
    </div>

    <div class="row">
        <!-- Session Details Form -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">🎬 Session Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Select Movie</label>
                        <select class="form-select" @onchange="OnMovieSelected">
                            <option value="">-- Select a movie we discussed --</option>
                            @if (availableMovies != null)
                            {
                                @foreach (var movie in availableMovies)
                                {
                                    <option value="@movie.Id">
                                        @movie.Movie - (@movie.StartDate.ToString("MMMM yyyy"))
                                    </option>
                                }
                            }
                        </select>
                        @if (!string.IsNullOrEmpty(movieTitle))
                        {
                            <div class="mt-2 text-success">
                                <small>✅ Selected: <strong>@movieTitle</strong> - @sessionDate.ToString("MMM dd, yyyy")</small>
                            </div>
                        }
                    </div>
                    
                    <div class="mb-3">
                        <ParticipantAssignment 
                            @bind-MicAssignments="micAssignments"
                            @bind-PresentSpeakers="presentSpeakers" />
                    </div>

                    <div class="alert alert-info">
                        <strong>Folder will be created as:</strong><br/>
                        @GetFolderName()
                    </div>
                </div>
            </div>
        </div>

        <!-- File Upload Section -->
        <div class="col-lg-6 mb-4">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">📁 Upload Audio Files</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <p class="text-muted">Upload individual speaker files and/or master recording</p>
                        <div class="border border-2 border-dashed rounded p-4 text-center">
                            <InputFile OnChange="@LoadFiles" multiple accept=".mp3,.wav,.ogg,.aac,.m4a,.mp4,.mov,.avi,.mkv" class="form-control" />
                            <p class="mt-2 mb-0 text-muted">
                                <i class="bi bi-cloud-upload"></i> Drop files here or click to browse
                            </p>
                        </div>
                    </div>

                    @if (uploadedFiles.Any())
                    {
                        <h6>Uploading Files:</h6>
                        @foreach (var file in uploadedFiles)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <strong>@file.DisplayName</strong>
                                    <span class="badge @(file.IsComplete ? "bg-success" : "bg-primary")">
                                        @(file.IsComplete ? "Complete" : "Uploading...")
                                    </span>
                                </div>
                                <div class="progress" style="height: 20px;">
                                    <div class="progress-bar @(file.IsComplete ? "bg-success" : "progress-bar-striped progress-bar-animated")" 
                                         role="progressbar" 
                                         style="width: @file.UploadedPercentage%;" 
                                         aria-valuenow="@file.UploadedPercentage" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @file.UploadedPercentage.ToString("F0")%
                                    </div>
                                </div>
                                <small class="text-muted">@FormatBytes(file.UploadedBytes) / @FormatBytes(file.Size)</small>
                            </div>
                        }
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            <i class="bi bi-exclamation-triangle"></i> @errorMessage
                        </div>
                    }

                    @if (uploadComplete)
                    {
                        <div class="alert alert-success mt-3">
                            <i class="bi bi-check-circle"></i> Upload complete! Files saved to: @finalFolderPath
                        </div>
                        <button class="btn btn-primary" @onclick="StartNewUpload">
                            <i class="bi bi-plus"></i> Upload Another Session
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Instructions -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">📝 File Naming Guidelines</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Individual Microphone Files:</h6>
                            <ul>
                                @foreach (var mic in presentSpeakers.OrderBy(x => x))
                                {
                                    var participantName = micAssignments.TryGetValue(mic, out var name) 
                                        ? name 
                                        : MovieSessionService.GetParticipantName(mic + 1); // Display as 1-based but store as 0-based
                                    <li><code>MIC@(mic + 1).WAV</code> - @participantName</li>
                                }
                                <li><code>PHONE.WAV</code> - Phone audio input</li>
                                <li><code>SOUND_PAD.WAV</code> - Sound effects/clips</li>
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Master Recording (CRITICAL):</h6>
                            <ul>
                                <li><code>2020_0102_0036.WAV</code> - Random filename (master mix)</li>
                                <li><code>master_recording.wav</code></li>
                                <li><code>group_audio.mp3</code></li>
                                <li><code>combined_session.m4a</code></li>
                                <li>Any unidentified file (usually largest)</li>
                            </ul>
                            <p class="text-info mb-0"><small>ℹ️ Master mix will be automatically renamed to <code>MASTER_MIX.WAV</code></small></p>
                            <p class="text-warning mb-0"><small>⚠️ Master mix contains all speakers merged - essential for speaker identification!</small></p>
                        </div>
                    </div>
                    <div class="alert alert-warning mt-3">
                        <i class="bi bi-info-circle"></i> <strong>Important:</strong> Assign each participant to their microphone number above. These assignments will be saved and reused for future sessions.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string movieTitle = string.Empty;
    private DateTime sessionDate = DateTime.Today;
    private HashSet<int> presentSpeakers = new();
    private Dictionary<int, string> micAssignments = new();
    private List<FileUploadProgress> uploadedFiles = new();
    private string errorMessage = string.Empty;
    private bool uploadComplete = false;
    private string finalFolderPath = string.Empty;
    private const int ChunkSize = 1024 * 1024; // 1 MB chunks
    private List<MovieEvent>? availableMovies;
    private MovieEvent? selectedMovie;

    private static readonly string[] AllowedExtensions = { 
        ".mp3", ".wav", ".ogg", ".flac", ".aac", ".m4a", ".wma",
        ".mp4", ".mov", ".avi", ".mkv", ".webm", ".m4v", ".3gp"
    };

    protected override async Task OnInitializedAsync()
    {
        // Load available movies
        availableMovies = await MovieReviewService.GetAllMovieEventsAsync();
    }

    private async Task OnMovieSelected(ChangeEventArgs e)
    {
        var movieIdStr = e.Value?.ToString();
        if (string.IsNullOrEmpty(movieIdStr) || !Guid.TryParse(movieIdStr, out var movieId))
        {
            selectedMovie = null;
            movieTitle = string.Empty;
            sessionDate = DateTime.Today;
            return;
        }

        selectedMovie = availableMovies?.FirstOrDefault(m => m.Id == movieId);
        if (selectedMovie != null)
        {
            movieTitle = selectedMovie.Movie ?? string.Empty;
            // Use start date if available, otherwise use seen date, otherwise today
            sessionDate = selectedMovie.StartDate.Date;
        }
    }


    private string GetFolderName()
    {
        if (string.IsNullOrWhiteSpace(movieTitle))
            return "YYYY-MonthName-MovieTitle";
        
        var sanitizedTitle = Regex.Replace(movieTitle.Trim(), @"[^a-zA-Z0-9\s-]", "")
                                  .Replace(" ", "-");
        return $"{sessionDate:yyyy}-{sessionDate:MMMM}-{sanitizedTitle}";
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        if (string.IsNullOrWhiteSpace(movieTitle))
        {
            errorMessage = "Please enter a movie title first.";
            return;
        }

        if (!presentSpeakers.Any())
        {
            errorMessage = "Please select at least one participant.";
            return;
        }

        errorMessage = string.Empty;
        uploadComplete = false;
        var files = e.GetMultipleFiles(maximumFileCount: 20);
        uploadedFiles.Clear();

        // Create target folder
        var folderName = GetFolderName();
        var pendingDir = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", "pending");
        var targetFolder = Path.Combine(pendingDir, folderName);
        Directory.CreateDirectory(targetFolder);
        finalFolderPath = targetFolder;

        // Queue files for upload
        foreach (var file in files)
        {
            if (IsAudioFile(file.Name))
            {
                var displayName = DetermineFileType(file.Name);
                uploadedFiles.Add(new FileUploadProgress(file.Name, displayName, file.Size));
            }
            else
            {
                errorMessage += $"{file.Name} is not a supported audio/video file. ";
            }
        }

        // Start upload progress timer
        using var timer = new Timer(_ => InvokeAsync(StateHasChanged));
        timer.Change(TimeSpan.FromMilliseconds(250), TimeSpan.FromMilliseconds(250));

        // Upload files
        foreach (var file in files)
        {
            if (IsAudioFile(file.Name))
            {
                await UploadFile(file, targetFolder);
            }
        }

        // Prepare movie session with mic assignments (NO database save yet)
        var session = await MovieSessionService.PrepareSessionFromFolder(targetFolder, micAssignments);
        
        uploadComplete = true;
        await InvokeAsync(StateHasChanged);
    }

    private string DetermineFileType(string fileName)
    {
        var upperName = fileName.ToUpper();
        
        // Check for MIC1-6 pattern (file names are 1-based, but we store assignments as 0-based)
        var micMatch = Regex.Match(upperName, @"^MIC(\d)\.WAV$");
        if (micMatch.Success)
        {
            var micFileNum = int.Parse(micMatch.Groups[1].Value); // 1-based from file
            var micAssignmentNum = micFileNum - 1; // Convert to 0-based for assignment lookup
            var participantName = micAssignments.TryGetValue(micAssignmentNum, out var name) 
                ? name 
                : MovieSessionService.GetParticipantName(micFileNum); // Display uses 1-based
            return $"🎤 {participantName}";
        }
        
        // Check for PHONE
        if (upperName == "PHONE.WAV")
        {
            return "📞 Phone Input";
        }
        
        // Check for SOUND_PAD
        if (upperName == "SOUND_PAD.WAV" || upperName == "SOUNDPAD.WAV")
        {
            return "🔊 Sound Pad";
        }
        
        // Check for legacy speaker files (1-based file naming)
        var speakerMatch = Regex.Match(fileName, @"^(\d)_Speaker\d", RegexOptions.IgnoreCase);
        if (speakerMatch.Success)
        {
            var speakerFileNum = int.Parse(speakerMatch.Groups[1].Value); // 1-based from file
            var speakerAssignmentNum = speakerFileNum - 1; // Convert to 0-based for assignment lookup
            var participantName = micAssignments.TryGetValue(speakerAssignmentNum, out var name) 
                ? name 
                : MovieSessionService.GetParticipantName(speakerFileNum); // Display uses 1-based
            return $"🎤 {participantName}";
        }
        
        // Check for master recording with date pattern (e.g., 2024_1122_1839.wav)
        var datePattern = Regex.Match(fileName, @"^\d{4}_\d{4}_\d{4}\.(wav|mp3|m4a|aac|ogg|flac)$", RegexOptions.IgnoreCase);
        if (datePattern.Success)
        {
            return "🎬 Master Mix (timestamped)";
        }
        
        // Check for master recording with keywords
        var lowerName = fileName.ToLower();
        if (lowerName.Contains("master") || lowerName.Contains("combined") || 
            lowerName.Contains("full") || lowerName.Contains("group"))
        {
            return "🎬 Master Recording";
        }
        
        // If unidentified, just show the filename
        return fileName;
    }

    private async Task UploadFile(IBrowserFile file, string targetFolder)
    {
        try
        {
            var progress = uploadedFiles.First(f => f.OriginalFileName == file.Name);
            var filePath = Path.Combine(targetFolder, file.Name);

            using var stream = file.OpenReadStream(maxAllowedSize: 10L * 1024 * 1024 * 1024); // 10 GB
            using var fileStream = new FileStream(filePath, FileMode.Create);

            var buffer = new byte[ChunkSize];
            int bytesRead;

            while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
            {
                await fileStream.WriteAsync(buffer.AsMemory(0, bytesRead));
                progress.UploadedBytes += bytesRead;
            }
            
            progress.IsComplete = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
            errorMessage += $"Error uploading {file.Name}: {ex.Message}. ";
        }
    }

    private void StartNewUpload()
    {
        movieTitle = string.Empty;
        sessionDate = DateTime.Today;
        selectedMovie = null;
        uploadedFiles.Clear();
        errorMessage = string.Empty;
        uploadComplete = false;
        finalFolderPath = string.Empty;
        micAssignments.Clear();
        presentSpeakers.Clear();
    }

    private bool IsAudioFile(string fileName)
    {
        return AllowedExtensions.Contains(Path.GetExtension(fileName).ToLowerInvariant());
    }

    private string FormatBytes(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return string.Format("{0:n1} {1}", number, suffixes[counter]);
    }

    private class FileUploadProgress
    {
        public string OriginalFileName { get; set; }
        public string DisplayName { get; set; }
        public long Size { get; set; }
        public long UploadedBytes { get; set; }
        public double UploadedPercentage => (double)UploadedBytes / Size * 100;
        public bool IsComplete { get; set; }

        public FileUploadProgress(string originalFileName, string displayName, long size)
        {
            OriginalFileName = originalFileName;
            DisplayName = displayName;
            Size = size;
        }
    }
}