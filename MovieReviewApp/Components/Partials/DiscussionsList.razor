@using MovieReviewApp.Models

@inject MovieSessionService MovieSessionService
@inject NavigationManager Navigation

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">üé≠ Movie Discussion Sessions</h3>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading processed sessions...</p>
        </div>
    }
    else if (!sessions.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No discussion sessions found yet.
            <br>
            <small>Sessions will appear here after they are created through the audio processing page.</small>
            <br>
            <small>Check the browser console (F12) for any error messages.</small>
        </div>
    }
    else
    {
        <div class="row g-4">
            @foreach (var session in sessions)
            {
                <div class="col-lg-6 col-xl-4">
                    <div class="card h-100 shadow-sm @GetCardClass(session)">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h6 class="mb-0 text-truncate">@session.MovieTitle</h6>
                            <span class="badge @GetStatusBadgeClass(session.Status)">
                                @GetStatusIcon(session.Status) @session.Status
                            </span>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <small class="text-muted">
                                    <i class="bi bi-calendar3"></i> @session.Date.ToString("MMM dd, yyyy")
                                    @if (session.ProcessedAt.HasValue)
                                    {
                                        <br />
                                        <i class="bi bi-check-circle"></i>
                                        <span>Complete</span>
                                    }
                                </small>
                            </div>

                            @if (session.SessionStats != null)
                            {
                                <div class="mb-3">
                                    <div class="row text-center">
                                        <div class="col-4">
                                            <div class="border-end">
                                                <div class="fw-bold text-primary">@session.SessionStats.TotalDuration</div>
                                                <small class="text-muted">Duration</small>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <div class="border-end">
                                                <div class="fw-bold text-success">@session.AudioFiles.Count(f => f.ProcessingStatus == AudioProcessingStatus.Complete)</div>
                                                <small class="text-muted">Files</small>
                                            </div>
                                        </div>
                                        <div class="col-4">
                                            <div class="fw-bold text-warning">@session.SessionStats.HighlightMoments</div>
                                            <small class="text-muted">Highlights</small>
                                        </div>
                                    </div>
                                </div>
                            }

                            @if (session.ParticipantsPresent.Any())
                            {
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-1">Participants:</small>
                                    <div class="d-flex flex-wrap gap-1">
                                        @foreach (var participant in session.ParticipantsPresent.Take(4))
                                        {
                                            <span class="badge bg-light text-dark">@participant</span>
                                        }
                                        @if (session.ParticipantsPresent.Count > 4)
                                        {
                                            <span class="badge bg-secondary">+@(session.ParticipantsPresent.Count - 4) more</span>
                                        }
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(session.SessionStats?.BestMomentsSummary))
                            {
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-1">Best Moments:</small>
                                    <p class="small mb-0">@GetTruncatedSummary(session.SessionStats.BestMomentsSummary)</p>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="d-flex gap-2">
                                <button class="btn btn-primary btn-sm flex-fill" @onclick="() => ViewSession(session.Id.ToString())">
                                    <i class="bi bi-eye"></i> View Details
                                </button>
                                @if (session.CategoryResults != null)
                                {
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => ViewHighlights(session.Id.ToString())">
                                        <i class="bi bi-star"></i> Highlights
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (sessions.Count >= 20)
        {
            <div class="text-center mt-4">
                <button class="btn btn-outline-primary" @onclick="LoadMoreSessions" disabled="@isLoadingMore">
                    @if (isLoadingMore)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                    }
                    Load More Sessions
                </button>
            </div>
        }
    }
</div>

@code {
    private List<MovieSession> sessions = new();
    private bool isLoading = true;
    private bool isLoadingMore = false;
    private int currentLimit = 20;

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        isLoading = true;
        try
        {
            sessions = await MovieSessionService.GetRecentSessions(currentLimit);
            Console.WriteLine($"DiscussionsList: Loaded {sessions.Count} sessions");
            
            // Log session details to help debug
            foreach (var session in sessions)
            {
                Console.WriteLine($"Session: {session.MovieTitle}, Status: {session.Status}, Date: {session.Date}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sessions: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            sessions = new List<MovieSession>();
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadMoreSessions()
    {
        isLoadingMore = true;
        currentLimit += 20;
        await LoadSessions();
        isLoadingMore = false;
    }

    private void ViewSession(string sessionId)
    {
        Navigation.NavigateTo($"/discussions/session/{sessionId}");
    }

    private void ViewHighlights(string sessionId)
    {
        Navigation.NavigateTo($"/discussions/session/{sessionId}#highlights");
    }

    private string GetCardClass(MovieSession session) => session.Status switch
    {
        ProcessingStatus.Complete => "border-success",
        ProcessingStatus.Failed => "border-danger",
        ProcessingStatus.Analyzing => "border-warning",
        _ => ""
    };

    private string GetStatusBadgeClass(ProcessingStatus status) => status switch
    {
        ProcessingStatus.Complete => "bg-success",
        ProcessingStatus.Failed => "bg-danger",
        ProcessingStatus.Analyzing => "bg-warning",
        ProcessingStatus.Transcribing => "bg-info",
        ProcessingStatus.Validating => "bg-secondary",
        _ => "bg-secondary"
    };

    private string GetStatusIcon(ProcessingStatus status) => status switch
    {
        ProcessingStatus.Complete => "‚úÖ",
        ProcessingStatus.Failed => "‚ùå",
        ProcessingStatus.Analyzing => "üîÑ",
        ProcessingStatus.Transcribing => "üé§",
        ProcessingStatus.Validating => "‚è≥",
        _ => "‚ùì"
    };

    private string GetTruncatedSummary(string summary)
    {
        if (string.IsNullOrEmpty(summary) || summary.Length <= 100)
            return summary;
        
        return summary.Substring(0, 100) + "...";
    }

}