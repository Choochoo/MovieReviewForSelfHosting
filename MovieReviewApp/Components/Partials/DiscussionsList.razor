@page "/discussions/list"
@using System.IO
@using System.Text.Json
@inject IWebHostEnvironment WebHostEnvironment
@inject HttpClient Http
@inject IConfiguration Configuration;

<h3>Processed Files</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}

@if (Folders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="mb-3">
        <label for="folderSelect" class="form-label">Select Folder:</label>
        <select id="folderSelect" class="form-select" @onchange="OnFolderSelected">
            <option value="">Choose a folder...</option>
            @foreach (var folder in Folders)
            {
                <option value="@folder">@folder.Replace("-", " ")</option>
            }
        </select>
    </div>

    @if (!string.IsNullOrEmpty(SelectedFolder))
    {
        <div class="d-flex justify-content-between">
            <h4>Files for @SelectedFolder.Replace("-", " ")</h4>
            <button @onclick="GuessNames" class="btn btn-secondary">Guess Names</button>
        </div>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>File Name</th>
                    <th>Type</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var file in Files)
                {
                    <tr>
                        <td>@file.Name</td>
                        <td>@file.Extension</td>
                        <td>
                            @if (file.Extension.Equals(".txt", StringComparison.OrdinalIgnoreCase))
                            {
                                <button @onclick="() => ViewTextFile(file.FullName)" class="btn btn-primary">View</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (!string.IsNullOrEmpty(TextFileContent))
{
    <div class="mt-4">
        <h4>File Content</h4>
        <pre>@TextFileContent</pre>
    </div>
}

@code {
    private List<string> Folders { get; set; } = new List<string>();
    private List<FileInfo> Files { get; set; } = new List<FileInfo>();
    private string SelectedFolder { get; set; }
    private string TextFileContent { get; set; }
    private string _apiKey { get; set; }
    private string ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadFolders();
            _apiKey = Configuration["OpenAI:ApiKey"];
            if (string.IsNullOrEmpty(_apiKey))
            {
                ErrorMessage = "API key not found in configuration.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error initializing: {ex.Message}";
        }
    }

    private Task LoadFolders()
    {
        try
        {
            var uploadsPath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
            Directory.CreateDirectory(uploadsPath);
            Folders = Directory.GetDirectories(uploadsPath)
                               .Select(Path.GetFileName)
                               .Where(x => x.IndexOf("_") == -1)
                               .ToList();
            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading folders: {ex.Message}";
            return Task.CompletedTask;
        }
    }

    private void OnFolderSelected(ChangeEventArgs e)
    {
        try
        {
            SelectedFolder = e.Value.ToString();
            if (!string.IsNullOrEmpty(SelectedFolder))
            {
                LoadFiles(SelectedFolder);
            }
            else
            {
                Files.Clear();
            }
            TextFileContent = string.Empty;
            ErrorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error selecting folder: {ex.Message}";
        }
    }

    private void LoadFiles(string folderName)
    {
        try
        {
            var folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", folderName);
            Files = Directory.GetFiles(folderPath)
                             .Where(f => Path.GetExtension(f).Equals(".txt", StringComparison.OrdinalIgnoreCase))
                             .Select(f => new FileInfo(f))
                             .ToList();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading files: {ex.Message}";
        }
    }

    private async Task ViewTextFile(string filePath)
    {
        try
        {
            TextFileContent = await File.ReadAllTextAsync(filePath);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error viewing file: {ex.Message}";
        }
    }

    private async Task GuessNames()
    {
        try
        {
            if (string.IsNullOrEmpty(_apiKey))
            {
                ErrorMessage = "API key is missing. Please check your configuration.";
                return;
            }

            var folderPath = Path.Combine(WebHostEnvironment.WebRootPath, "uploads", SelectedFolder);
            var textFiles = Directory.GetFiles(folderPath, "*.txt");

            if (textFiles.Length == 0)
            {
                ErrorMessage = "No text files found in the selected folder.";
                return;
            }

            var fileContents = textFiles.Select(File.ReadAllText).ToArray();

            var prompt = "There are six people in this conversation: Jared, Lacey, Keri, Dave, Jeremiah, Nikki. " +
                         "Each file represents a separate conversation, and the speakers (e.g., 'Speaker A', 'Speaker B') " +
                         "may represent different people across files, but they are always one of the six people mentioned. " +
                         "Please replace the 'Speaker A', 'Speaker B', etc. with the most appropriate name in each file.  Keep note that 'Carrie' is actually spelled 'Keri'\n\n";

            for (int i = 0; i < fileContents.Length; i++)
            {
                prompt += $"File {i + 1} content:\n{fileContents[i]}\n\n";
            }

            var request = new
            {
                model = "gpt-4o",
                messages = new[]
                {
                    new { role = "system", content = "You are an assistant that helps identify speakers in conversations." },
                    new { role = "user", content = prompt }
                }
            };

            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", _apiKey);
            var response = await Http.PostAsJsonAsync("https://api.openai.com/v1/chat/completions", request);

            if (response.IsSuccessStatusCode)
            {
                var responseBody = await response.Content.ReadAsStringAsync();

                using (JsonDocument doc = JsonDocument.Parse(responseBody))
                {
                    var root = doc.RootElement;
                    var choices = root.GetProperty("choices");
                    var messageContent = choices[0].GetProperty("message").GetProperty("content").GetString();

                    for (int i = 0; i < textFiles.Length; i++)
                    {
                        var fileContent = File.ReadAllText(textFiles[i]);
                        var updatedContent = ApplyGuessedNames(fileContent, messageContent);
                        File.WriteAllText(textFiles[i], updatedContent);
                    }
                }

                ErrorMessage = string.Empty;
                await LoadFolders();
                LoadFiles(SelectedFolder);
            }
            else
            {
                ErrorMessage = $"API request failed: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error guessing names: {ex.Message}";
        }
    }

    private string ApplyGuessedNames(string fileContent, string messageContent)
    {
        try
        {
            var speakerMap = new Dictionary<string, string>();
            var lines = messageContent.Split('\n');
            foreach (var line in lines)
            {
                var parts = line.Split(':');
                if (parts.Length == 2)
                {
                    var speakerPlaceholder = parts[0].Trim();
                    var speakerName = parts[1].Trim();
                    if (speakerPlaceholder.StartsWith("Speaker ") &&
                        new[] { "Jared", "Lacey", "Keri", "Dave", "Jeremiah", "Nikki" }.Contains(speakerName))
                    {
                        speakerMap[speakerPlaceholder] = speakerName;
                    }
                }
            }

            foreach (var speaker in speakerMap)
            {
                fileContent = fileContent.Replace(speaker.Key + ":", speaker.Value + ":");
            }

            return fileContent;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error applying guessed names: {ex.Message}";
            return fileContent;
        }
    }
}