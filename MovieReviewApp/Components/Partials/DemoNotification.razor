@* DemoNotification.razor *@
@if (ShowNotification)
{
    <div class="demo-notification @(IsVisible ? "show" : "")" @onclick="Close">
        <div class="demo-notification-content" @onclick:stopPropagation="true">
            <div class="demo-notification-header">
                <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                <span class="demo-notification-title">Demo Mode</span>
                <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
            </div>
            <div class="demo-notification-body">
                @Message
            </div>
        </div>
    </div>
}

<style>
    .demo-notification {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .demo-notification.show {
        opacity: 1;
        visibility: visible;
    }

    .demo-notification-content {
        background: var(--bs-body-bg);
        border: 1px solid var(--bs-border-color);
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        max-width: 500px;
        width: 90%;
        animation: slideDown 0.3s ease;
    }

    @@keyframes slideDown {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .demo-notification-header {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 1rem 1rem 0.5rem 1rem;
        border-bottom: 1px solid var(--bs-border-color);
    }

    .demo-notification-title {
        font-weight: 600;
        font-size: 1.1rem;
        flex-grow: 1;
    }

    .demo-notification-body {
        padding: 1rem;
        color: var(--bs-secondary);
    }

    .btn-close {
        filter: var(--bs-btn-close-filter);
    }
</style>

@code {
    [Parameter] public bool ShowNotification { get; set; } = false;
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public EventCallback OnClose { get; set; }

    private bool IsVisible = false;

    protected override async Task OnParametersSetAsync()
    {
        if (ShowNotification && !IsVisible)
        {
            await Task.Delay(50); // Small delay to ensure DOM is ready
            IsVisible = true;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        IsVisible = false;
        StateHasChanged();
        
        await Task.Delay(300); // Wait for animation to complete
        ShowNotification = false;
        await OnClose.InvokeAsync();
    }
}