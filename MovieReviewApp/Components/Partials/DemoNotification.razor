@* DemoNotification.razor *@
@if (ShowNotification)
{
    <div class="demo-notification @(IsVisible ? "show" : "")" @onclick="Close">
        <div class="demo-notification-content" @onclick:stopPropagation="true">
            <div class="demo-notification-header">
                <i class="bi bi-exclamation-triangle-fill text-warning"></i>
                <span class="demo-notification-title">Demo Mode</span>
                <button type="button" class="btn-close" @onclick="Close" aria-label="Close"></button>
            </div>
            <div class="demo-notification-body">
                @Message
            </div>
        </div>
    </div>
}


@code {
    [Parameter] public bool ShowNotification { get; set; } = false;
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public EventCallback OnClose { get; set; }

    private bool IsVisible = false;

    protected override async Task OnParametersSetAsync()
    {
        if (ShowNotification && !IsVisible)
        {
            await Task.Delay(50); // Small delay to ensure DOM is ready
            IsVisible = true;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        IsVisible = false;
        StateHasChanged();
        
        await Task.Delay(300); // Wait for animation to complete
        ShowNotification = false;
        await OnClose.InvokeAsync();
    }
}