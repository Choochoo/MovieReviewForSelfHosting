
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@inject DemoProtectionService DemoProtection
@implements IDisposable

<div class="theme-toggle @(isToggling ? "switching" : "")" @onclick="ToggleTheme">
    <div class="theme-icon">
        @if (isDarkMode)
        {
            <!-- Sun icon for switching to light -->
            <svg viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="5"/>
                <line x1="12" y1="1" x2="12" y2="3"/>
                <line x1="12" y1="21" x2="12" y2="23"/>
                <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
                <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
                <line x1="1" y1="12" x2="3" y2="12"/>
                <line x1="21" y1="12" x2="23" y2="12"/>
                <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
                <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
            </svg>
        }
        else
        {
            <!-- Moon icon for switching to dark -->
            <svg viewBox="0 0 24 24">
                <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
            </svg>
        }
    </div>
</div>

@code {
    private bool isDarkMode = false;
    private bool isToggling = false;

    protected override async Task OnInitializedAsync()
    {
        // Set default based on instance type
        isDarkMode = !DemoProtection.IsDemoInstance; // Demo defaults to light, normal defaults to dark
        
        // Initialize theme service
        await ThemeService.InitializeAsync();
        isDarkMode = ThemeService.IsDarkMode;
        
        ThemeService.ThemeChanged += OnThemeChanged;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string groupTheme = await ThemeService.GetGroupThemeAsync();
            await ApplyTheme(groupTheme, isDarkMode);
        }
    }

    private async Task ToggleTheme()
    {
        if (isToggling) return;
        
        try
        {
            Console.WriteLine($"Starting theme toggle. Current isDarkMode: {isDarkMode}");
            isToggling = true;
            StateHasChanged(); // Update UI to show toggling state
            
            bool newDarkMode = !isDarkMode;
            Console.WriteLine($"Switching to isDarkMode: {newDarkMode}");
            
            // Update local state first
            isDarkMode = newDarkMode;
            
            // Get current group theme
            string groupTheme = await ThemeService.GetGroupThemeAsync();
            Console.WriteLine($"Current group theme: {groupTheme}");
            
            // Apply theme immediately to DOM
            await ApplyTheme(groupTheme, newDarkMode);
            
            // Save dark mode preference (this will also trigger ThemeChanged event)
            await ThemeService.SetDarkMode(newDarkMode);
            Console.WriteLine($"Dark mode saved: {newDarkMode}");
            
            // Force state update
            StateHasChanged();
            
            // Small delay for visual feedback
            await Task.Delay(300);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error toggling theme: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
        }
        finally
        {
            isToggling = false;
            StateHasChanged();
        }
    }

    private void OnThemeChanged(string groupTheme, bool newDarkMode)
    {
        Console.WriteLine($"OnThemeChanged called with groupTheme: {groupTheme}, isDarkMode: {newDarkMode}");
        isDarkMode = newDarkMode;
        InvokeAsync(async () =>
        {
            await ApplyTheme(groupTheme, newDarkMode);
            StateHasChanged();
        });
    }

    private async Task ApplyTheme(string groupTheme, bool darkMode)
    {
        try
        {
            Console.WriteLine($"ApplyTheme called with groupTheme: {groupTheme}, darkMode: {darkMode}");
            
            // Set the group theme attribute first
            await JSRuntime.InvokeVoidAsync("setGroupThemeAttribute", groupTheme);
            Console.WriteLine($"Set group theme attribute: {groupTheme}");
            
            // Apply the combined theme
            await JSRuntime.InvokeVoidAsync("setTheme", groupTheme, darkMode);
            Console.WriteLine($"Applied combined theme: {groupTheme}-{(darkMode ? "dark" : "light")}");
            
            // Verify the theme was applied by checking the DOM
            string appliedTheme = await JSRuntime.InvokeAsync<string>("eval", "document.documentElement.getAttribute('data-theme')");
            Console.WriteLine($"Verified applied theme in DOM: {appliedTheme}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error applying theme: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            
            // Fallback: try to apply theme directly via eval
            try
            {
                string combinedTheme = $"{groupTheme}-{(darkMode ? "dark" : "light")}";
                await JSRuntime.InvokeVoidAsync("eval", $"document.documentElement.setAttribute('data-theme', '{combinedTheme}')");
                Console.WriteLine($"Fallback theme application successful: {combinedTheme}");
            }
            catch (Exception fallbackEx)
            {
                Console.WriteLine($"Fallback theme application failed: {fallbackEx.Message}");
            }
        }
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}