@using MovieReviewApp.Services
@inject ThemeService ThemeService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="theme-toggle @(isToggling ? "switching" : "")" @onclick="ToggleTheme">
    <div class="theme-icon">
        @if (currentTheme == "dark")
        {
            <!-- Sun icon for switching to light -->
            <svg viewBox="0 0 24 24">
                <circle cx="12" cy="12" r="5"/>
                <line x1="12" y1="1" x2="12" y2="3"/>
                <line x1="12" y1="21" x2="12" y2="23"/>
                <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
                <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
                <line x1="1" y1="12" x2="3" y2="12"/>
                <line x1="21" y1="12" x2="23" y2="12"/>
                <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
                <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
            </svg>
        }
        else
        {
            <!-- Moon icon for switching to dark -->
            <svg viewBox="0 0 24 24">
                <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
            </svg>
        }
    </div>
</div>

@code {
    private string currentTheme = "dark";
    private bool isToggling = false;

    protected override async Task OnInitializedAsync()
    {
        currentTheme = await ThemeService.GetThemeAsync();
        ThemeService.ThemeChanged += OnThemeChanged;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ApplyTheme(currentTheme);
        }
    }

    private async Task ToggleTheme()
    {
        if (isToggling) return;
        
        isToggling = true;
        StateHasChanged();

        await ThemeService.ToggleThemeAsync();

        await Task.Delay(250);
        isToggling = false;
        StateHasChanged();
    }

    private void OnThemeChanged(string newTheme)
    {
        currentTheme = newTheme;
        InvokeAsync(async () =>
        {
            await ApplyTheme(newTheme);
            StateHasChanged();
        });
    }

    private async Task ApplyTheme(string theme)
    {
        await JSRuntime.InvokeVoidAsync("setTheme", theme);
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}