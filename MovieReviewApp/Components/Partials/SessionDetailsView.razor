@using MovieReviewApp.Models

@using MovieReviewApp.Components.Partials
@inject NavigationManager Navigation
@inject MovieSessionService MovieSessionService
@inject DiscussionQuestionService DiscussionQuestionService

@if (Session != null && _questionsLoaded)
{
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex gap-2 flex-wrap">
                <button class="btn btn-secondary" @onclick="GoToStats">
                    <i class="bi bi-arrow-left"></i> Back to Sessions
                </button>
                
            </div>
        </div>
    </div>

    <!-- Session Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h2 class="mb-2">@Session.MovieTitle</h2>
                            <p class="text-muted mb-2">@Session.Date.ToLocalDisplay().ToString("MMMM yyyy")</p>
                            <div class="d-flex gap-1 flex-wrap">
                                @if (Session.MicAssignments != null)
                                {
                                    @foreach (var participant in Session.MicAssignments.Values)
                                    {
                                        <span class="badge bg-primary">üé§ @participant</span>
                                    }
                                }
                            </div>
                        </div>
                        <div class="col-md-4">
                            @if (Session.SessionStats != null)
                            {
                                <div class="text-end">
                                    <div class="mb-2">
                                        <span class="text-muted">Duration:</span> <strong>@Session.SessionStats.TotalDuration</strong>
                                    </div>
                                    <div class="mb-2">
                                        <span class="text-muted">Energy Level:</span> <strong>@GetEnergyEmoji(Session.SessionStats.EnergyLevel) @Session.SessionStats.EnergyLevel</strong>
                                    </div>
                                    <div>
                                        <span class="text-muted">Highlights:</span> <strong>@Session.SessionStats.HighlightMoments moments</strong>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Session.SessionStats?.BestMomentsSummary))
                    {
                        <div class="mt-3 p-3 bg-primary bg-opacity-10 border border-primary border-opacity-25 rounded">
                            <h6 class="text-primary mb-2"><i class="bi bi-chat-quote-fill"></i> Session Highlights</h6>
                            <p class="mb-0 text-dark">@Session.SessionStats.BestMomentsSummary</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Conversation Statistics -->
    @if (Session.SessionStats != null && !string.IsNullOrEmpty(Session.SessionStats.MostTalkativePerson))
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0"><i class="bi bi-bar-chart-fill"></i> Conversation Analytics</h5>
                    </div>
                    <div class="card-body">
                        <!-- Personality Awards Section -->
                        <h6 class="text-primary mb-3">üèÜ Personality Awards</h6>
                        <div class="row g-4 mb-4">
                            <div class="col-md-6 col-lg-4">
                                <div class="stat-card h-100">
                                    <div class="stat-icon">
                                        <i class="bi bi-chat-text text-primary"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-title">Most Talkative</div>
                                        <div class="stat-value">@Session.SessionStats.MostTalkativePerson</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 col-lg-4">
                                <div class="stat-card h-100">
                                    <div class="stat-icon">
                                        <i class="bi bi-question-circle text-info"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-title">Most Inquisitive</div>
                                        <div class="stat-value">@Session.SessionStats.MostInquisitivePerson</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 col-lg-4">
                                <div class="stat-card h-100">
                                    <div class="stat-icon">
                                        <i class="bi bi-emoji-laughing text-warning"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-title">Comedy Generator</div>
                                        <div class="stat-value">@Session.SessionStats.FunniestPerson</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 col-lg-4">
                                <div class="stat-card h-100">
                                    <div class="stat-icon">
                                        <i class="bi bi-exclamation-triangle text-danger"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-title">Biggest Interruptor</div>
                                        <div class="stat-value">@Session.SessionStats.BiggestInterruptor</div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 col-lg-4">
                                <div class="stat-card h-100">
                                    <div class="stat-icon">
                                        <i class="bi bi-fire text-danger"></i>
                                    </div>
                                    <div class="stat-content">
                                        <div class="stat-title">Foul Mouth</div>
                                        <div class="stat-value">@Session.SessionStats.MostProfanePerson</div>
                                    </div>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(Session.SessionStats.MostPejorativePerson))
                            {
                                <div class="col-md-6 col-lg-4">
                                    <div class="stat-card h-100">
                                        <div class="stat-icon">
                                            <i class="bi bi-chat-square-text text-warning"></i>
                                        </div>
                                        <div class="stat-content">
                                            <div class="stat-title">Most Pejorative</div>
                                            <div class="stat-value">@Session.SessionStats.MostPejorativePerson</div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        
                        <hr class="my-4">
                        
                        <!-- Session Metrics Section -->
                        <h6 class="text-primary mb-3">üìä Session Metrics</h6>
                        <div class="row g-4">
                            <div class="col-6 col-md-4 col-lg-2">
                                <div class="metric-card">
                                    <div class="metric-value">@Session.SessionStats.TotalQuestions</div>
                                    <div class="metric-label">Questions</div>
                                </div>
                            </div>
                            <div class="col-6 col-md-4 col-lg-2">
                                <div class="metric-card">
                                    <div class="metric-value">@Session.SessionStats.TotalLaughterMoments</div>
                                    <div class="metric-label">Laughs</div>
                                </div>
                            </div>
                            <div class="col-6 col-md-4 col-lg-2">
                                <div class="metric-card">
                                    <div class="metric-value">@Session.SessionStats.TotalInterruptions</div>
                                    <div class="metric-label">Interruptions</div>
                                </div>
                            </div>
                            <div class="col-6 col-md-4 col-lg-2">
                                <div class="metric-card">
                                    <div class="metric-value">@Session.SessionStats.TotalCurseWords</div>
                                    <div class="metric-label">Curse Words</div>
                                </div>
                            </div>
                            @if (Session.SessionStats.TotalPejorativeWords > 0)
                            {
                                <div class="col-6 col-md-4 col-lg-2">
                                    <div class="metric-card">
                                        <div class="metric-value">@Session.SessionStats.TotalPejorativeWords</div>
                                        <div class="metric-label">Pejoratives</div>
                                    </div>
                                </div>
                            }
                            <div class="col-6 col-md-4 col-lg-2">
                                <div class="metric-card">
                                    <div class="metric-value fs-6">@Session.SessionStats.ConversationTone</div>
                                    <div class="metric-label">Tone</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Detailed Word Usage Analysis -->
    @if (Session.SessionStats != null && (Session.SessionStats.DetailedCurseWords.Any() || Session.SessionStats.DetailedPejorativeWords.Any()))
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <i class="bi bi-exclamation-triangle-fill"></i> Language Usage Report
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (Session.SessionStats.DetailedCurseWords.Any())
                        {
                            <div class="mb-4">
                                <h6 class="text-danger mb-3">
                                    ü§¨ Profanity Usage
                                </h6>
                                <div class="row g-3">
                                    @foreach (var speakerGroup in Session.SessionStats.DetailedCurseWords.GroupBy(w => w.Speaker))
                                    {
                                        <div class="col-md-6 col-lg-4">
                                            <div class="language-card">
                                                <div class="language-header">
                                                    <span class="badge bg-primary">@speakerGroup.Key</span>
                                                    <span class="total-count">Total: @speakerGroup.Sum(w => w.Count)</span>
                                                </div>
                                                <div class="word-list">
                                                    @foreach (var word in speakerGroup.OrderByDescending(w => w.Count))
                                                    {
                                                        <div class="word-item">
                                                            <code class="word-text text-danger">@word.Word</code>
                                                            <span class="word-count">√ó@word.Count</span>
                                                        </div>
                                                        @if (word.ContextExamples.Any())
                                                        {
                                                            <div class="context-example">
                                                                <small>"@word.ContextExamples.First()"</small>
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        @if (Session.SessionStats.DetailedPejorativeWords.Any())
                        {
                            <div class="mb-4">
                                <h6 class="text-warning mb-3">
                                    üò§ Pejorative Language
                                </h6>
                                <div class="row g-3">
                                    @foreach (var speakerGroup in Session.SessionStats.DetailedPejorativeWords.GroupBy(w => w.Speaker))
                                    {
                                        <div class="col-md-6 col-lg-4">
                                            <div class="language-card">
                                                <div class="language-header">
                                                    <span class="badge bg-primary">@speakerGroup.Key</span>
                                                    <span class="total-count">Total: @speakerGroup.Sum(w => w.Count)</span>
                                                </div>
                                                <div class="word-list">
                                                    @foreach (var word in speakerGroup.OrderByDescending(w => w.Count))
                                                    {
                                                        <div class="word-item">
                                                            <code class="word-text text-warning">@word.Word</code>
                                                            <span class="word-count">√ó@word.Count</span>
                                                        </div>
                                                        @if (word.ContextExamples.Any())
                                                        {
                                                            <div class="context-example">
                                                                <small>"@word.ContextExamples.First()"</small>
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <div class="alert alert-info alert-sm">
                            <small>
                                <i class="bi bi-info-circle"></i>
                                Language patterns are automatically detected and analyzed to provide insights into conversation dynamics.
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Initial Discussion Questions -->
    @if (Session.SessionStats?.InitialQuestions != null && Session.SessionStats.InitialQuestions.Any())
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0"><i class="bi bi-chat-left-quote-fill"></i> Opening Discussion Questions</h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            @foreach (var qa in GetOrderedQuestions(Session.SessionStats.InitialQuestions))
                            {
                                <div class="col-lg-6">
                                    <div class="question-answer-item">
                                        <div class="question-header">
                                            <h6 class="text-success mb-1">
                                                <i class="bi bi-question-circle"></i> @qa.Question
                                            </h6>
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <span class="badge bg-primary">@qa.Speaker</span>
                                                <small class="text-muted">@qa.Timestamp</small>
                                            </div>
                                        </div>
                                        <div class="answer-content">
                                            <p class="mb-2">"@qa.Answer"</p>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div class="entertainment-rating">
                                                    @for (int i = 0; i < qa.EntertainmentValue; i++)
                                                    {
                                                        <i class="bi bi-star-fill text-warning"></i>
                                                    }
                                                    @for (int i = qa.EntertainmentValue; i < 10; i++)
                                                    {
                                                        <i class="bi bi-star text-muted"></i>
                                                    }
                                                    <small class="text-muted ms-1">@qa.EntertainmentValue/10</small>
                                                </div>
                                                @if (!string.IsNullOrEmpty(qa.AudioClipUrl))
                                                {
                                                    <button class="btn btn-sm btn-outline-success" onclick="playAudioClip('@qa.AudioClipUrl')">
                                                        <i class="bi bi-play-circle"></i> Play
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (Session.Status == ProcessingStatus.Complete && Session.CategoryResults != null)
    {
        <!-- Category Results - Better organized sections -->
        <div class="row">
            <div class="col-12">
                <h3 class="mb-4">üé≠ Comedy & Entertainment</h3>
            </div>
        </div>
        <div class="row g-4 mb-5">
            <CategoryCard Title="üèÜ Best Joke" Winner="@Session.CategoryResults.BestJoke" />
            <CategoryCard Title="üé≠ Best Roast" Winner="@Session.CategoryResults.BestRoast" />
            <CategoryCard Title="üöÄ Funniest Random Tangent" Winner="@Session.CategoryResults.FunniestRandomTangent" />
            <CategoryCard Title="üôà Guilty Pleasure Admission" Winner="@Session.CategoryResults.GuiltyPleasureAdmission" />
        </div>

        <div class="row">
            <div class="col-12">
                <h3 class="mb-4">üî• Hot Takes & Debates</h3>
            </div>
        </div>
        <div class="row g-4 mb-5">
            <CategoryCard Title="üî• Hottest Take" Winner="@Session.CategoryResults.HottestTake" />
            <CategoryCard Title="üí• Biggest Argument Starter" Winner="@Session.CategoryResults.BiggestArgumentStarter" />
            <CategoryCard Title="üí™ Most Passionate Defense" Winner="@Session.CategoryResults.MostPassionateDefense" />
            <CategoryCard Title="ü§î Most Offensive Take" Winner="@Session.CategoryResults.MostOffensiveTake" />
        </div>

        <div class="row">
            <div class="col-12">
                <h3 class="mb-4">üé¨ Movie Insights & Reactions</h3>
            </div>
        </div>
        <div class="row g-4 mb-5">
            <CategoryCard Title="üò± Best Plot Twist Revelation" Winner="@Session.CategoryResults.BestPlotTwistRevelation" />
            <CategoryCard Title="üéØ Movie Snob Moment" Winner="@Session.CategoryResults.MovieSnobMoment" />
            <CategoryCard Title="ü§ù Biggest Unanimous Reaction" Winner="@Session.CategoryResults.BiggestUnanimousReaction" />
            <CategoryCard Title="ü§ê Quietest Person's Best Moment" Winner="@Session.CategoryResults.QuietestPersonBestMoment" />
        </div>

        <div class="row">
            <div class="col-12">
                <h3 class="mb-4">üò¥ Low Energy Moments</h3>
            </div>
        </div>
        <div class="row g-4 mb-5">
            <CategoryCard Title="üò¥ Most Boring Statement" Winner="@Session.CategoryResults.MostBoringStatement" />
        </div>

        <!-- Top 5 Lists -->
        @if (Session.CategoryResults.FunniestSentences != null || Session.CategoryResults.MostBlandComments != null)
        {
            <div class="row mt-5">
                <div class="col-12">
                    <h3 class="mb-4">üìä Top 5 Lists</h3>
                </div>
            </div>
            
            <div class="row g-4">
                @if (Session.CategoryResults.FunniestSentences != null)
                {
                    <div class="col-lg-6">
                        <TopFiveDisplay TopFiveList="@Session.CategoryResults.FunniestSentences" 
                                      Title="Top 5 Funniest Sentences" 
                                      IconClass="bi bi-emoji-laughing"
                                      IsFunny="true" />
                    </div>
                }
                
                @if (Session.CategoryResults.MostBlandComments != null)
                {
                    <div class="col-lg-6">
                        <TopFiveDisplay TopFiveList="@Session.CategoryResults.MostBlandComments" 
                                      Title="Top 5 Most Bland Comments" 
                                      IconClass="bi bi-emoji-neutral"
                                      IsFunny="false" />
                    </div>
                }
            </div>
        }

        <!-- Highlight Reel Recommendations -->
        @if (GetHighlightReel().Any())
        {
            <div class="row mt-5">
                <div class="col-12">
                    <div class="card bg-warning bg-opacity-10">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0">üé¨ Highlight Reel Recommendations</h5>
                        </div>
                        <div class="card-body">
                            <p class="text-muted">Top moments that would make the best compilation:</p>
                            <ol class="mb-0">
                                @foreach (var highlight in GetHighlightReel())
                                {
                                    <li>@highlight</li>
                                }
                            </ol>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else if (Session.Status == ProcessingStatus.Failed)
    {
        <div class="alert alert-danger">
            <i class="bi bi-x-circle"></i> Processing failed: @Session.ErrorMessage
        </div>
    }
    else
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Processing...</span>
            </div>
            <p class="mt-3">Session is being processed...</p>
        </div>
    }
}
else if (Session != null && !_questionsLoaded)
{
    <div class="text-center p-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading session details...</span>
        </div>
        <p class="mt-3 text-muted">Loading session details...</p>
    </div>
}
else
{
    <div class="alert alert-warning">
        <h5><i class="bi bi-exclamation-triangle"></i> Session Not Found</h5>
        <p>The requested session could not be loaded.</p>
        <button class="btn btn-primary" @onclick="GoToStats">
            <i class="bi bi-arrow-left"></i> Back to Sessions
        </button>
    </div>
}

<!-- Audio Player Modal -->
<div class="modal fade" id="audioPlayerModal" tabindex="-1" aria-labelledby="audioPlayerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="audioPlayerModalLabel">üéß Audio Clip Player</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <audio id="audioPlayer" controls class="w-100" preload="metadata">
                    Your browser does not support the audio element.
                </audio>
                <div class="mt-3">
                    <small class="text-muted">
                        <i class="bi bi-info-circle"></i> 
                        Audio clips include 3 seconds before and 5 seconds after the highlight moment for context.
                    </small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Include audio player JavaScript -->
<script src="~/js/audioPlayer.js"></script>


@code {
    [Parameter] public MovieSession? Session { get; set; }
    
    private bool showingContext = false;
    private string? playingAudioId;
    private List<Models.DiscussionQuestion>? _configuredQuestions;
    private bool _questionsLoaded = false;


    private string GetEnergyEmoji(EnergyLevel level) => level switch
    {
        EnergyLevel.High => "üî•",
        EnergyLevel.Medium => "‚ö°",
        EnergyLevel.Low => "üò¥",
        _ => "‚ùì"
    };


    private List<QuestionAnswer> GetOrderedQuestions(List<QuestionAnswer> questions)
    {
        try
        {
            // Use pre-loaded configured questions to avoid async deadlock
            if (_questionsLoaded && _configuredQuestions?.Any() == true)
            {
                var orderedQuestions = new List<QuestionAnswer>();
                
                // First, add questions in the configured order
                foreach (var configuredQuestion in _configuredQuestions.OrderBy(q => q.Order))
                {
                    var questionText = configuredQuestion.Question.ToLower();
                    var matchingQuestions = questions.Where(q => 
                        q.Question.ToLower().Contains(questionText.Replace("my ", "").Replace("i ", "")) ||
                        q.Question.ToLower().Contains(questionText.Replace("my ", "your ").Replace("i ", "you ")) ||
                        SimilarQuestionMatch(q.Question.ToLower(), questionText)
                    ).ToList();
                    
                    orderedQuestions.AddRange(matchingQuestions.OrderBy(q => q.Speaker));
                }
                
                // Then add any remaining questions that didn't match the configured patterns
                var remainingQuestions = questions.Except(orderedQuestions).OrderBy(q => q.Timestamp);
                orderedQuestions.AddRange(remainingQuestions);
                
                return orderedQuestions;
            }
        }
        catch (Exception)
        {
            // Fallback to timestamp ordering if there's any issue with configured questions
        }
        
        // Fallback: order by timestamp if no configured questions available
        return questions.OrderBy(q => q.Timestamp).ToList();
    }

    private bool SimilarQuestionMatch(string actualQuestion, string configuredQuestion)
    {
        // Remove common variations and compare core meaning
        var normalizedActual = actualQuestion
            .Replace("did you", "did i")
            .Replace("do you", "do i") 
            .Replace("would you", "would i")
            .Replace("are you", "am i")
            .Replace("your", "my");
            
        var normalizedConfigured = configuredQuestion
            .Replace("did you", "did i")
            .Replace("do you", "do i")
            .Replace("would you", "would i") 
            .Replace("are you", "am i")
            .Replace("your", "my");
            
        // Check for substantial overlap
        var actualWords = normalizedActual.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        var configuredWords = normalizedConfigured.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        
        var commonWords = actualWords.Intersect(configuredWords).Count();
        var minWords = Math.Min(actualWords.Length, configuredWords.Length);
        
        // If 60% or more words match, consider it the same question
        return commonWords >= (minWords * 0.6);
    }

    private List<string> GetHighlightReel()
    {
        if (Session?.CategoryResults == null) return new List<string>();

        var highlights = new List<(string category, CategoryWinner winner, int score)>();
        
        void AddIfNotNull(string category, CategoryWinner? winner)
        {
            if (winner != null)
                highlights.Add((category, winner, winner.EntertainmentScore));
        }

        AddIfNotNull("Best Joke", Session.CategoryResults.BestJoke);
        AddIfNotNull("Hottest Take", Session.CategoryResults.HottestTake);
        AddIfNotNull("Best Roast", Session.CategoryResults.BestRoast);
        AddIfNotNull("Biggest Argument", Session.CategoryResults.BiggestArgumentStarter);
        AddIfNotNull("Random Tangent", Session.CategoryResults.FunniestRandomTangent);

        return highlights
            .OrderByDescending(h => h.score)
            .Take(5)
            .Select(h => $"{h.category} - {h.winner.Speaker} at {h.winner.Timestamp}: \"{h.winner.Quote.Substring(0, Math.Min(h.winner.Quote.Length, 50))}...\"")
            .ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _configuredQuestions = await DiscussionQuestionService.GetActiveQuestionsAsync();
            _questionsLoaded = true;
        }
        catch (Exception)
        {
            // Fallback - questions will be null and default ordering will be used
            _questionsLoaded = true;
        }
    }

    private void GoToStats() => Navigation.NavigateTo("/discussions/stats");



}
