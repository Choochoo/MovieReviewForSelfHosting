@page "/discussions/upload/process"
@using MovieReviewApp.Models
@using MovieReviewApp.Services
@using System.Globalization
@using System.Text.RegularExpressions
@inject IWebHostEnvironment WebHostEnvironment
@inject MovieSessionService MovieSessionService
@inject NavigationManager Navigation
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">🎬 Movie Session Processing Center</h3>
        </div>
    </div>

    <div class="row">
        <!-- Directory Monitoring Section -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">📁 Directory Monitor</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Monitoring Directory:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" value="@pendingDirectory" readonly />
                            <button class="btn btn-outline-secondary" @onclick="RefreshDirectories">
                                <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                        </div>
                    </div>

                    @if (pendingFolders.Any())
                    {
                        <h6 class="mb-2">📂 Pending Movie Sessions:</h6>
                        <div class="list-group">
                            @foreach (var folder in pendingFolders)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">@folder.MovieTitle</h6>
                                        <small class="text-muted">@folder.Date.ToString("MMM dd, yyyy") • @folder.FileCount files</small>
                                    </div>
                                    <button class="btn btn-sm btn-success" @onclick="() => ProcessFolder(folder)" disabled="@IsProcessing">
                                        <i class="bi bi-play-fill"></i> Process
                                    </button>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-0">
                            <i class="bi bi-info-circle"></i> No pending folders found. Drop movie folders in the format YYYY-MM-DD_MovieTitle
                        </div>
                    }

                    <div class="mt-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="autoProcess" @bind="autoProcessEnabled">
                            <label class="form-check-label" for="autoProcess">
                                Auto-process new folders
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Processing Queue Section -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">⚙️ Processing Queue</h5>
                </div>
                <div class="card-body">
                    @if (processingQueue.Any())
                    {
                        <div class="list-group">
                            @foreach (var item in processingQueue)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">@GetMovieTitleFromPath(item.FolderPath)</h6>
                                            <div class="mb-2">
                                                <span class="badge @GetStatusBadgeClass(item.Status)">@GetStatusIcon(item.Status) @item.Status</span>
                                                @if (!string.IsNullOrEmpty(item.CurrentStep))
                                                {
                                                    <small class="text-muted ms-2">@item.CurrentStep</small>
                                                }
                                            </div>
                                            @if (item.Progress > 0)
                                            {
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                                         role="progressbar" 
                                                         style="width: @item.Progress%" 
                                                         aria-valuenow="@item.Progress" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="100">
                                                        @item.Progress%
                                                    </div>
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(item.ErrorMessage))
                                            {
                                                <div class="alert alert-danger mt-2 mb-0 py-1 px-2">
                                                    <small>@item.ErrorMessage</small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary mb-0">
                            <i class="bi bi-hourglass"></i> No items in processing queue
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Sessions Section -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">✅ Recently Processed Sessions</h5>
                </div>
                <div class="card-body">
                    @if (recentSessions.Any())
                    {
                        <div class="row g-3">
                            @foreach (var session in recentSessions.Take(6))
                            {
                                <div class="col-md-4">
                                    <div class="card h-100 @(session.Status == ProcessingStatus.Failed ? "border-danger" : "border-success")">
                                        <div class="card-body">
                                            <h6 class="card-title">@session.MovieTitle</h6>
                                            <p class="card-text">
                                                <small class="text-muted">
                                                    @session.Date.ToString("MMM dd, yyyy") • 
                                                    @session.ParticipantsPresent.Count/@(session.ParticipantsPresent.Count + session.ParticipantsAbsent.Count) present
                                                </small>
                                            </p>
                                            @if (session.Status == ProcessingStatus.Complete)
                                            {
                                                <button class="btn btn-sm btn-primary" @onclick="() => ViewSession(session.Id)">
                                                    <i class="bi bi-eye"></i> View Results
                                                </button>
                                            }
                                            else if (session.Status == ProcessingStatus.Failed)
                                            {
                                                <span class="text-danger">
                                                    <i class="bi bi-x-circle"></i> Failed: @session.ErrorMessage
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-0">
                            <i class="bi bi-info-circle"></i> No processed sessions yet
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string pendingDirectory = string.Empty;
    private string processedDirectory = string.Empty;
    private string failedDirectory = string.Empty;
    private bool autoProcessEnabled = false;
    private bool IsProcessing = false;
    private Timer? directoryWatcher;

    private List<PendingFolder> pendingFolders = new();
    private List<ProcessingQueueItem> processingQueue = new();
    private List<MovieSession> recentSessions = new();

    protected override async Task OnInitializedAsync()
    {
        InitializeDirectories();
        await RefreshDirectories();
        await LoadRecentSessions();
        StartDirectoryWatcher();
    }

    private void InitializeDirectories()
    {
        var uploadsBase = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
        pendingDirectory = Path.Combine(uploadsBase, "pending");
        processedDirectory = Path.Combine(uploadsBase, "processed");
        failedDirectory = Path.Combine(uploadsBase, "failed");

        Directory.CreateDirectory(pendingDirectory);
        Directory.CreateDirectory(processedDirectory);
        Directory.CreateDirectory(failedDirectory);
    }

    private void StartDirectoryWatcher()
    {
        directoryWatcher = new Timer(async _ => await CheckForNewFolders(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task CheckForNewFolders()
    {
        if (autoProcessEnabled && !IsProcessing)
        {
            await RefreshDirectories();
            if (pendingFolders.Any())
            {
                await ProcessFolder(pendingFolders.First());
            }
        }
    }

    private async Task RefreshDirectories()
    {
        pendingFolders.Clear();
        
        if (Directory.Exists(pendingDirectory))
        {
            var directories = Directory.GetDirectories(pendingDirectory);
            foreach (var dir in directories)
            {
                var folderName = Path.GetFileName(dir);
                var match = Regex.Match(folderName, @"^(\d{4})-(\d{2})-(\d{2})_(.+)$");
                
                if (match.Success)
                {
                    var date = new DateTime(
                        int.Parse(match.Groups[1].Value),
                        int.Parse(match.Groups[2].Value),
                        int.Parse(match.Groups[3].Value)
                    );
                    var movieTitle = match.Groups[4].Value.Replace("_", " ");
                    var audioFiles = Directory.GetFiles(dir, "*.*", SearchOption.TopDirectoryOnly)
                        .Where(f => IsAudioFile(f))
                        .ToList();

                    if (audioFiles.Any())
                    {
                        pendingFolders.Add(new PendingFolder
                        {
                            Path = dir,
                            Date = date,
                            MovieTitle = movieTitle,
                            FileCount = audioFiles.Count
                        });
                    }
                }
            }
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task ProcessFolder(PendingFolder folder)
    {
        IsProcessing = true;
        
        var queueItem = new ProcessingQueueItem
        {
            SessionId = Guid.NewGuid().ToString(),
            FolderPath = folder.Path,
            Status = ProcessingStatus.Validating,
            CurrentStep = "Validating folder structure"
        };
        
        processingQueue.Add(queueItem);
        await InvokeAsync(StateHasChanged);

        try
        {
            // Create movie session
            var session = await MovieSessionService.CreateSessionFromFolder(folder.Path);
            queueItem.SessionId = session.Id;
            
            // Start processing
            await MovieSessionService.ProcessSession(session.Id, (status, progress, step) =>
            {
                queueItem.Status = status;
                queueItem.Progress = progress;
                queueItem.CurrentStep = step;
                InvokeAsync(StateHasChanged);
            });

            // Move to processed directory
            var processedPath = Path.Combine(processedDirectory, Path.GetFileName(folder.Path));
            if (Directory.Exists(processedPath))
            {
                Directory.Delete(processedPath, true);
            }
            Directory.Move(folder.Path, processedPath);

            processingQueue.Remove(queueItem);
            await RefreshDirectories();
            await LoadRecentSessions();
        }
        catch (Exception ex)
        {
            queueItem.Status = ProcessingStatus.Failed;
            queueItem.ErrorMessage = ex.Message;
            
            // Move to failed directory
            var failedPath = Path.Combine(failedDirectory, Path.GetFileName(folder.Path));
            if (Directory.Exists(failedPath))
            {
                Directory.Delete(failedPath, true);
            }
            Directory.Move(folder.Path, failedPath);
            
            await Task.Delay(5000); // Show error for 5 seconds
            processingQueue.Remove(queueItem);
        }
        finally
        {
            IsProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadRecentSessions()
    {
        recentSessions = await MovieSessionService.GetRecentSessions(10);
    }

    private void ViewSession(string sessionId)
    {
        Navigation.NavigateTo($"/discussions/session/{sessionId}");
    }

    private bool IsAudioFile(string filePath)
    {
        var audioExtensions = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            ".mp3", ".wav", ".ogg", ".flac", ".aac", ".m4a", ".wma",
            ".mp4", ".mov", ".avi", ".mkv", ".webm", ".m4v", ".3gp"
        };
        return audioExtensions.Contains(Path.GetExtension(filePath));
    }

    private string GetMovieTitleFromPath(string path)
    {
        var folderName = Path.GetFileName(path);
        var match = Regex.Match(folderName, @"^\d{4}-\d{2}-\d{2}_(.+)$");
        return match.Success ? match.Groups[1].Value.Replace("_", " ") : folderName;
    }

    private string GetStatusBadgeClass(ProcessingStatus status) => status switch
    {
        ProcessingStatus.Pending => "bg-secondary",
        ProcessingStatus.Validating => "bg-info",
        ProcessingStatus.Transcribing => "bg-primary",
        ProcessingStatus.Analyzing => "bg-warning",
        ProcessingStatus.Complete => "bg-success",
        ProcessingStatus.Failed => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetStatusIcon(ProcessingStatus status) => status switch
    {
        ProcessingStatus.Pending => "🟡",
        ProcessingStatus.Validating => "🔍",
        ProcessingStatus.Transcribing => "🔵",
        ProcessingStatus.Analyzing => "🟠",
        ProcessingStatus.Complete => "🟢",
        ProcessingStatus.Failed => "🔴",
        _ => "⚪"
    };

    public void Dispose()
    {
        directoryWatcher?.Dispose();
    }

    private class PendingFolder
    {
        public string Path { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public string MovieTitle { get; set; } = string.Empty;
        public int FileCount { get; set; }
    }
}
