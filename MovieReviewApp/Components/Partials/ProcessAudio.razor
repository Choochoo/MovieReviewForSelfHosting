@using MovieReviewApp.Models
@using MovieReviewApp.Services
@using System.Globalization
@using System.Text.RegularExpressions
@inject IWebHostEnvironment WebHostEnvironment
@inject MovieSessionService MovieSessionService
@inject NavigationManager Navigation
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">🎬 Movie Session Processing Center</h3>
        </div>
    </div>

    <div class="row">
        <!-- Directory Monitoring Section -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">📁 Directory Monitor</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Monitoring Directory:</label>
                        <div class="input-group">
                            <input type="text" class="form-control" value="@pendingDirectory" readonly />
                            <button class="btn btn-outline-secondary" @onclick="RefreshDirectories">
                                <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                        </div>
                    </div>

                    @if (pendingFolders.Any())
                    {
                        <h6 class="mb-2">📂 All Movie Sessions:</h6>
                        <div class="list-group">
                            @foreach (var folder in pendingFolders)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">@folder.MovieTitle <span class="badge bg-secondary ms-2">@folder.Status</span></h6>
                                        <small class="text-muted">@folder.Date.ToString("MMM yyyy") • @folder.FileCount files</small>
                                    </div>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-success" @onclick="() => ProcessFolder(folder)" disabled="@IsProcessing">
                                            <i class="bi bi-arrow-clockwise"></i> "Process"
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeletePendingFolder(folder)" disabled="@IsProcessing">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-0">
                            <i class="bi bi-info-circle"></i> No pending folders found. Drop movie folders in the format YYYY-MonthName-MovieTitle
                        </div>
                    }

                    <div class="mt-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="autoProcess" @bind="autoProcessEnabled">
                            <label class="form-check-label" for="autoProcess">
                                Auto-process new folders
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Processing Queue Section -->
        <div class="col-lg-6 mb-4">
            <div class="card h-100">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">⚙️ Processing Queue</h5>
                </div>
                <div class="card-body">
                    @if (processingQueue.Any())
                    {
                        <div class="list-group">
                            @foreach (var item in processingQueue)
                            {
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <h6 class="mb-1">@GetMovieTitleFromPath(item.FolderPath)</h6>
                                            <div class="mb-2">
                                                <span class="badge @GetStatusBadgeClass(item.Status)">@GetStatusIcon(item.Status) @item.Status</span>
                                                @if (!string.IsNullOrEmpty(item.CurrentStep))
                                                {
                                                    <small class="text-muted ms-2">@item.CurrentStep</small>
                                                }
                                            </div>
                                            @if (item.Progress > 0)
                                            {
                                                <div class="progress" style="height: 20px;">
                                                    <div class="progress-bar progress-bar-striped progress-bar-animated" 
                                                         role="progressbar" 
                                                         style="width: @item.Progress%" 
                                                         aria-valuenow="@item.Progress" 
                                                         aria-valuemin="0" 
                                                         aria-valuemax="100">
                                                        @item.Progress%
                                                    </div>
                                                </div>
                                            }
                                            @if (!string.IsNullOrEmpty(item.ErrorMessage))
                                            {
                                                <div class="alert alert-danger mt-2 mb-0 py-1 px-2">
                                                    <small>@item.ErrorMessage</small>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary mb-0">
                            <i class="bi bi-hourglass"></i> No items in processing queue
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Sessions Section -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">✅ Recently Processed Sessions</h5>
                </div>
                <div class="card-body">
                    @if (recentSessions.Any())
                    {
                        <div class="row g-3">
                            @foreach (var session in recentSessions.Take(6))
                            {
                                <div class="col-md-4">
                                    <div class="card h-100 @(session.Status == ProcessingStatus.Failed ? "border-danger" : "border-success")">
                                        <div class="card-body">
                                            <h6 class="card-title">@session.MovieTitle</h6>
                                            <p class="card-text">
                                                <small class="text-muted">
                                                    @session.Date.ToString("MMM yyyy") • 
                                                    @GetTranscriptCount(session)/@GetMp3Count(session) transcripts
                                                </small>
                                            </p>
                                            @if (session.Status == ProcessingStatus.Complete || session.Status == ProcessingStatus.Analyzing)
                                            {
                                                @if (HasTranscripts(session))
                                                {
                                                    <div class="d-flex gap-2 align-items-center">
                                                        <button class="btn btn-sm btn-warning" @onclick="() => RunAnalysis(session.Id.ToString())" disabled="@IsAnalyzing">
                                                            @if (IsAnalyzing && analyzingSessionId == session.Id.ToString())
                                                            {
                                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                                                <span>Analyzing...</span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-gear"></i> <span>Run Analysis</span>
                                                            }
                                                        </button>
                                                        @if (session.CategoryResults != null)
                                                        {
                                                            <span class="badge bg-success">
                                                                <i class="bi bi-check-circle"></i> Analyzed
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-secondary">
                                                                <i class="bi bi-clock"></i> Pending
                                                            </span>
                                                        }
                                                    </div>
                                                }
                                                else
                                                {
                                                    <button class="btn btn-sm btn-secondary" disabled>
                                                        <i class="bi bi-x-circle"></i> No Transcripts
                                                    </button>
                                                }
                                            }
                                            else if (session.Status == ProcessingStatus.Failed)
                                            {
                                                <span class="text-danger">
                                                    <i class="bi bi-x-circle"></i> Failed: @session.ErrorMessage
                                                </span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mb-0">
                            <i class="bi bi-info-circle"></i> No processed sessions yet
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string pendingDirectory = string.Empty;
    private string failedDirectory = string.Empty;
    private bool autoProcessEnabled = false;
    private bool IsProcessing = false;
    private Timer? directoryWatcher;

    private List<PendingFolder> pendingFolders = new();
    private List<ProcessingQueueItem> processingQueue = new();
    private List<MovieSession> recentSessions = new();
    private bool IsAnalyzing = false;
    private string? analyzingSessionId = null;

    protected override async Task OnInitializedAsync()
    {
        InitializeDirectories();
        await RefreshDirectories();
        await LoadRecentSessions();
        StartDirectoryWatcher();
    }

    private void InitializeDirectories()
    {
        var uploadsBase = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
        pendingDirectory = Path.Combine(uploadsBase, "pending");
        failedDirectory = Path.Combine(uploadsBase, "failed");

        // Create directories for the complete workflow
        Directory.CreateDirectory(pendingDirectory);        // WAV files awaiting conversion
        Directory.CreateDirectory(failedDirectory);          // WAV files that failed conversion
        Directory.CreateDirectory(Path.Combine(uploadsBase, "pending_mp3"));    // MP3 files awaiting processing
        Directory.CreateDirectory(Path.Combine(uploadsBase, "failed_mp3"));     // MP3 files that failed processing
        Directory.CreateDirectory(Path.Combine(uploadsBase, "processed_mp3"));  // MP3 files successfully processed
    }

    private void StartDirectoryWatcher()
    {
        directoryWatcher = new Timer(async _ => await CheckForNewFolders(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task CheckForNewFolders()
    {
        if (autoProcessEnabled && !IsProcessing)
        {
            await RefreshDirectories();
            if (pendingFolders.Any())
            {
                await ProcessFolder(pendingFolders.First());
            }
        }
    }

    private async Task RefreshDirectories()
    {
        pendingFolders.Clear();
        
        // Scan directories based on workflow: WAV folders and MP3 folders
        var uploadsBase = Path.Combine(WebHostEnvironment.WebRootPath, "uploads");
        var directoriesToScan = new[] { 
            pendingDirectory,                                    // WAV files awaiting conversion
            failedDirectory,                                     // WAV files that failed conversion
            Path.Combine(uploadsBase, "pending_mp3"),          // MP3 files awaiting processing
            Path.Combine(uploadsBase, "failed_mp3"),           // MP3 files that failed processing
            Path.Combine(uploadsBase, "processed_mp3")         // MP3 files successfully processed
        };
        
        foreach (var baseDir in directoriesToScan)
        {
            if (Directory.Exists(baseDir))
            {
                var directories = Directory.GetDirectories(baseDir);
                foreach (var dir in directories)
                {
                    var folderName = Path.GetFileName(dir);
                    var match = Regex.Match(folderName, @"^(\d{4})-([A-Za-z]+)-(.+)$");
                    
                    if (match.Success)
                    {
                        var year = int.Parse(match.Groups[1].Value);
                        var monthName = match.Groups[2].Value;
                        var movieTitle = match.Groups[3].Value.Replace("-", " ");
                        
                        // Parse month name to date
                        DateTime date;
                        if (!DateTime.TryParseExact($"{monthName} 1, {year}", "MMMM d, yyyy", 
                            System.Globalization.CultureInfo.InvariantCulture, 
                            System.Globalization.DateTimeStyles.None, out date))
                        {
                            date = DateTime.Now; // Fallback if month name is invalid
                        }
                        var audioFiles = Directory.GetFiles(dir, "*.*", SearchOption.TopDirectoryOnly)
                            .Where(f => IsAudioFile(f) && !IsTemporaryFile(f))
                            .ToList();

                        if (audioFiles.Any())
                        {
                            var baseDirName = Path.GetFileName(baseDir);
                            var status = baseDirName switch
                            {
                                "processed_mp3" => "✅ Processed",
                                "failed" => "❌ Failed (WAV)",
                                "failed_mp3" => "❌ Failed (MP3)",
                                "pending_mp3" => "🔄 MP3 Ready",
                                "pending" => "⏳ Pending (WAV)",
                                _ => "❓ Unknown"
                            };
                            
                            pendingFolders.Add(new PendingFolder
                            {
                                Path = dir,
                                Date = date,
                                MovieTitle = movieTitle,
                                FileCount = audioFiles.Count,
                                Status = status
                            });
                        }
                    }
                }
            }
        }
        
        // Sort by status (pending first) then by date
        pendingFolders = pendingFolders
            .OrderBy(f => f.Status == "⏳ Pending" ? 0 : f.Status == "❌ Failed" ? 1 : 2)
            .ThenByDescending(f => f.Date)
            .ToList();

        await InvokeAsync(StateHasChanged);
    }

    private async Task ProcessFolder(PendingFolder folder)
    {
        IsProcessing = true;
        
        var queueItem = new ProcessingQueueItem
        {
            SessionId = Guid.NewGuid().ToString(),
            FolderPath = folder.Path,
            Status = ProcessingStatus.Validating,
            CurrentStep = "Validating folder structure"
        };
        
        processingQueue.Add(queueItem);
        await InvokeAsync(StateHasChanged);

        try
        {
            // Get latest mic assignments to use as default
            var latestAssignments = await MovieSessionService.GetLatestMicAssignments();
            
            // Prepare movie session (NO database save yet)
            var session = await MovieSessionService.PrepareSessionFromFolder(folder.Path, latestAssignments);
            queueItem.SessionId = session.Id.ToString();
            
            // Start processing - only saves to database after 100% success
            await MovieSessionService.ProcessSession(session, (status, progress, step) =>
            {
                queueItem.Status = status;
                queueItem.Progress = progress;
                queueItem.CurrentStep = step;
                InvokeAsync(StateHasChanged);
            });

            // Files are already in their correct status folders (processed_mp3) via the service
            // No need to move folders - just refresh the view
            processingQueue.Remove(queueItem);
            await RefreshDirectories();
            await LoadRecentSessions();
        }
        catch (Exception ex)
        {
            queueItem.Status = ProcessingStatus.Failed;
            queueItem.ErrorMessage = ex.Message;
            
            // Files are already moved to appropriate failed folders by the service
            // No need to move folders here
            
            await Task.Delay(5000); // Show error for 5 seconds
            processingQueue.Remove(queueItem);
            await RefreshDirectories();
        }
        finally
        {
            IsProcessing = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadRecentSessions()
    {
        recentSessions = await MovieSessionService.GetRecentSessions(10);
    }

    private void ViewSession(string sessionId)
    {
        Navigation.NavigateTo($"/discussions/session/{sessionId}");
    }

    private bool HasTranscripts(MovieSession session)
    {
        return session.AudioFiles?.Any(f => !string.IsNullOrEmpty(f.TranscriptText)) ?? false;
    }

    private int GetMp3Count(MovieSession session)
    {
        return session.AudioFiles?.Count(f => f.FilePath.EndsWith(".mp3", StringComparison.OrdinalIgnoreCase)) ?? 0;
    }

    private int GetTranscriptCount(MovieSession session)
    {
        return session.AudioFiles?.Count(f => !string.IsNullOrEmpty(f.TranscriptText)) ?? 0;
    }

    private async Task RunAnalysis(string sessionId)
    {
        IsAnalyzing = true;
        analyzingSessionId = sessionId;
        await InvokeAsync(StateHasChanged);

        try
        {
            var success = await MovieSessionService.RerunAnalysis(sessionId);
            if (success)
            {
                await LoadRecentSessions(); // Refresh the sessions to show updated analysis
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            // Could add toast notification here
            Console.WriteLine($"Analysis failed: {ex.Message}");
        }
        finally
        {
            IsAnalyzing = false;
            analyzingSessionId = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task DeletePendingFolder(PendingFolder folder)
    {
        try
        {
            if (Directory.Exists(folder.Path))
            {
                Directory.Delete(folder.Path, recursive: true);
                await RefreshDirectories();
            }
        }
        catch (Exception ex)
        {
            // Could add a toast or error message here
            Console.WriteLine($"Error deleting folder: {ex.Message}");
        }
    }

    private bool IsAudioFile(string filePath)
    {
        var audioExtensions = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            ".mp3", ".wav", ".ogg", ".flac", ".aac", ".m4a", ".wma",
            ".mp4", ".mov", ".avi", ".mkv", ".webm", ".m4v", ".3gp"
        };
        return audioExtensions.Contains(Path.GetExtension(filePath));
    }

    private bool IsTemporaryFile(string filePath)
    {
        var fileName = Path.GetFileName(filePath).ToLowerInvariant();
        
        // Skip temporary files created during processing
        if (fileName.StartsWith("temp_") || fileName.Contains("_temp") || fileName.EndsWith(".tmp"))
            return true;
            
        // Skip duplicate master files (only show the renamed MASTER_MIX version)
        if (fileName.Contains("master") && !fileName.Equals("master_mix.wav", StringComparison.OrdinalIgnoreCase))
            return true;
            
        return false;
    }

    private string GetMovieTitleFromPath(string path)
    {
        var folderName = Path.GetFileName(path);
        var match = Regex.Match(folderName, @"^\d{4}-\d{2}-\d{2}_(.+)$");
        return match.Success ? match.Groups[1].Value.Replace("_", " ") : folderName;
    }

    private string GetStatusBadgeClass(ProcessingStatus status) => status switch
    {
        ProcessingStatus.Pending => "bg-secondary",
        ProcessingStatus.Validating => "bg-info",
        ProcessingStatus.Transcribing => "bg-primary",
        ProcessingStatus.Analyzing => "bg-warning",
        ProcessingStatus.Complete => "bg-success",
        ProcessingStatus.Failed => "bg-danger",
        _ => "bg-secondary"
    };

    private string GetStatusIcon(ProcessingStatus status) => status switch
    {
        ProcessingStatus.Pending => "🟡",
        ProcessingStatus.Validating => "🔍",
        ProcessingStatus.Transcribing => "🔵",
        ProcessingStatus.Analyzing => "🟠",
        ProcessingStatus.Complete => "🟢",
        ProcessingStatus.Failed => "🔴",
        _ => "⚪"
    };

    public void Dispose()
    {
        directoryWatcher?.Dispose();
    }

    private class PendingFolder
    {
        public string Path { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public string MovieTitle { get; set; } = string.Empty;
        public int FileCount { get; set; }
        public string Status { get; set; } = "⏳ Pending";
    }
}
