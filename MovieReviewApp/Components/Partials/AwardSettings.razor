@using MovieReviewApp.Models

@inject SettingService settingService
@inject ILogger<AwardSettings> Logger
@inject AwardQuestionService awardQuestionService

<div class="award-settings-content">
    <div class="award-toggle">
        <input class="form-check-input" type="checkbox" @bind="settings.AwardsEnabled" id="awardsEnabled">
        <label class="form-check-label" for="awardsEnabled">
            Enable Awards
        </label>
    </div>

    @if (settings.AwardsEnabled)
    {
            <div class="award-option">
                <label class="option-label">Phases Before Award:</label>
                <input type="number" class="form-control form-control-sm" @bind="settings.PhasesBeforeAward" min="1" />
            </div>

        <div class="questions-section">
            <div class="questions-header">
                <h6 class="questions-title">Award Questions</h6>
                <button class="btn btn-sm btn-secondary" @onclick="AddQuestion">
                    <i class="bi bi-plus-circle"></i> Add Question
                </button>
            </div>
            
            @if (!questions.Any())
            {
                <div class="empty-state">
                    <i class="bi bi-trophy"></i>
                    <p>No award questions added yet. Add some questions to get started!</p>
                </div>
            }
            else
            {
                <div class="questions-list">
                    @foreach (var question in questions)
                    {
                        <div class="question-item">
                            <div class="question-main">
                                <input type="text" 
                                       class="form-control question-input" 
                                       placeholder="Enter award question..."
                                       @bind="question.Question" />
                            </div>
                            <div class="question-controls">
                                <div class="votes-control">
                                    <label>Max Votes:</label>
                                    <input type="number" 
                                           class="form-control form-control-sm votes-input" 
                                           @bind="question.MaxVotes"
                                           min="1" />
                                </div>
                                <div class="active-control">
                                    <input class="form-check-input" 
                                           type="checkbox" 
                                           @bind="question.IsActive" />
                                    <label class="form-check-label">Active</label>
                                </div>
                                <button class="btn btn-danger btn-sm delete-btn" 
                                        @onclick="() => DeleteQuestion(question)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    
    <div class="settings-save">
        <button class="btn btn-primary" @onclick="SaveSettings" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                <span>Saving...</span>
            }
            else
            {
                <span>Save Award Settings</span>
            }
        </button>
        @if (showSaveSuccess)
        {
            <div class="save-success">
                <i class="bi bi-check-circle"></i>
                Settings saved successfully!
            </div>
        }
    </div>
</div>


@code {
    private AwardSetting settings = new();
    private List<AwardQuestion> questions = new();
    private List<Guid> questionsToDelete = new();
    private const string DEFAULT_QUESTION = "New Question";
    private bool isSaving;
    private bool showSaveSuccess;

    protected override async Task OnInitializedAsync()
    {
        settings = await settingService.GetAwardSettingsAsync();
        var allQuestions = await awardQuestionService.GetActiveAwardQuestionsAsync();
        questions = allQuestions
            .Where(q => q.Question != DEFAULT_QUESTION)
            .ToList();
    }

    private void AddQuestion()
    {
        var newQuestion = new AwardQuestion
            {
                Id = Guid.NewGuid(),
                Question = "",
                MaxVotes = 3,
                IsActive = true
            };
        questions.Add(newQuestion);
    }

    private void DeleteQuestion(AwardQuestion question)
    {
        questions.Remove(question);
        if (question.Id != Guid.Empty)
        {
            questionsToDelete.Add(question.Id);
        }
    }

    private async Task SaveSettings()
    {
        try
        {
            isSaving = true;
            showSaveSuccess = false;

            // Remove any questions that are empty or default
            questions.RemoveAll(q => string.IsNullOrWhiteSpace(q.Question) || q.Question == DEFAULT_QUESTION);

            // First save the AwardSettings
            var settingsJson = System.Text.Json.JsonSerializer.Serialize(settings);
            await settingService.AddOrUpdateSettingAsync(new Setting
                {
                    Key = "AwardSettings",
                    Value = settingsJson,
                    CreatedAt = DateTime.UtcNow,
                    UpdatedAt = DateTime.UtcNow
                });

            // Delete any existing default questions in the database
            await awardQuestionService.DeleteDefaultQuestionsAsync();

            // Delete questions that were removed
            foreach (var questionId in questionsToDelete)
            {
                await awardQuestionService.DeleteAsync(questionId);
            }

            // Then save each valid question
            foreach (var question in questions)
            {
                if (!string.IsNullOrWhiteSpace(question.Question) && question.Question != DEFAULT_QUESTION)
                {
                    // Ensure question has a valid GUID
                    if (question.Id == Guid.Empty)
                    {
                        question.Id = Guid.NewGuid();
                    }
                    await awardQuestionService.UpdateAsync(question);
                }
            }

            // Clear the delete list after successful save
            questionsToDelete.Clear();
            showSaveSuccess = true;

            // Auto-hide success message after 3 seconds
            await InvokeAsync(async () =>
            {
                await Task.Delay(3000);
                showSaveSuccess = false;
                StateHasChanged();
            });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving award settings");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}
