@using MovieReviewApp.Database
@using MovieReviewApp.Models
@inject MongoDb db
@inject HttpClient Http
@using Newtonsoft.Json.Linq
@inject IConfiguration Configuration

@if (MovieEvent != null)
{
    <div class="card mb-3">
        <div class="card-body">
            <p style="text-align:center;font-size:1.2em">@MovieEvent.StartDate.ToString("MMMM, yyyy")</p>
            <hr />
            @if (MovieEvent.IsEditing)
            {
                <div><b>Person:</b> @MovieEvent.Person</div>
                <div class="form-group">
                    <label><b>Movie: </b></label>
                    <input type="text" @bind="@MovieEvent.Movie" class="form-control" />
                </div>
                <div class="form-group">
                    <label><b>IMDb: </b></label>
                    <input type="text" @bind="@MovieEvent.IMDb" class="form-control" />
                </div>
                <div class="form-group">
                    <label><b>Poster URL:</b></label>
                    <input type="text" @bind="@MovieEvent.PosterUrl" class="form-control" />
                </div>
                <div class="form-group">
                    <label><b>Reason:</b></label>
                    <textarea placeholder="Your reason for choosing this film" @bind="@MovieEvent.Reasoning" class="form-control"></textarea>
                </div>
                <div class="form-group">
                    <label><b>Meetup Time:</b></label>
                    <input type="datetime-local" @bind="MovieEvent.MeetupTime" class="form-control" step="900" />
                </div>
                <div class="form-group">
                    <b>Have you already seen it?</b>
                    <input type="checkbox" @bind="@MovieEvent.AlreadySeen" class="form-check-input" />
                </div>
                @if (MovieEvent.AlreadySeen)
                {
                    <div class="form-group">
                        <b>When?</b>
                        <select @bind="selectedYear" class="form-control">
                            @foreach (var year in Enumerable.Range(1980, (DateTime.Now.Year+1)-1980))
                            {
                                <option value="@year">@year</option>
                            }
                        </select>
                    </div>
                }
                <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            }
            else
            {
                <div style="margin-left:10%;width:80%;text-align:center">
                    @if (string.IsNullOrEmpty(MovieEvent.Movie))
                    {
                        <span>@MovieEvent.Person's turn to choose.</span>
                    }
                    else
                    {
                        <span><b>@MovieEvent.Person</b> chose the movie <b>'@MovieEvent.Movie'</b></span>
                        @if (MovieEvent.SeenDate != null)
                        {
                            <span> for the month of @MovieEvent.EndDate.AddDays(-1).ToString("MMMM")</span>
                        }
                        if (MovieEvent.AlreadySeen && MovieEvent.SeenDate.HasValue)
                        {
                            <span> and last saw it in @MovieEvent.SeenDate.Value.Year.</span>
                        }
                        else
                        {
                            <span> and has never seen it before.</span>
                        }
                        @if (MovieEvent.MeetupTime.HasValue)
                        {
                            <br />
                            <br />
                            <span>We will discuss at <b>@MovieEvent.Person's</b> on <b>@MovieEvent.MeetupTime?.ToString("dddd M/d/yyyy h:mm tt").</b></span>
                        }
                    }
                </div>
                <br />

                @if (!string.IsNullOrEmpty(MovieEvent.PosterUrl))
                {
                    <div>
                        <img style="width:100%" src="@MovieEvent.PosterUrl" />
                        <br />
                        <br />
                    </div>
                }

                @if (!string.IsNullOrEmpty(MovieEvent.Reasoning))
                {
                    <div>
                        <p style="text-align:justify; width:90%;margin-left:5%">&nbsp;&nbsp;&nbsp;&nbsp;@MovieEvent.Reasoning</p>
                    </div>
                }

                <!-- Displaying the synopsis -->
                @if (!string.IsNullOrEmpty(MovieEvent.Movie) && !string.IsNullOrEmpty(Synopsis))
                {
                    <div>
                        <p style="text-align:justify; width:90%;margin-left:5%">&nbsp;&nbsp;&nbsp;&nbsp;<b>Synopsis:</b> @Synopsis</p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(MovieEvent.IMDb))
                {
                    <div>
                        <p style="text-align:justify; width:90%;margin-left:5%">IMDb: <a href="@MovieEvent.IMDb">Link</a></p>
                    </div>
                }

                @if (string.IsNullOrEmpty(MovieEvent.Movie))
                {
                    <div style="text-align:center;width:100%">
                        <button type="button" style="background-color: blue; margin:20px" class="btn btn-secondary" @onclick="Edit">ADD MOVIE FOR @MovieEvent.StartDate.ToString("MMMM").ToUpper()</button>
                    </div>
                }
                else
                {
                    <button type="button" class="btn btn-secondary" @onclick="Edit">Edit</button>
                }
            }
        </div>
    </div>
}
else
{
    <span>Loading...</span>
}

@code {
    [Parameter]
    public MovieEvent? MovieEvent { get; set; }
    private int selectedYear;
    private string Synopsis = "Loading...";
    private string _apiKey = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _apiKey = Configuration["TMDB:ApiKey"];
    }

    protected override async Task OnParametersSetAsync()
    {
        if (MovieEvent != null && MovieEvent.SeenDate.HasValue)
        {
            selectedYear = MovieEvent.SeenDate.Value.Year;
        }
        else
        {
            selectedYear = DateTime.Now.Year;
        }

        if (MovieEvent != null && !string.IsNullOrEmpty(MovieEvent.Movie))
        {
            await GetMovieSynopsisAsync(MovieEvent.Movie);
        }
    }

    private async Task GetMovieSynopsisAsync(string movieTitle)
    {
        try
        {
            string encodedTitle = Uri.EscapeDataString(movieTitle);
            string searchUrl = $"https://api.themoviedb.org/3/search/movie?api_key={_apiKey}&query={encodedTitle}";

            HttpResponseMessage response = await Http.GetAsync(searchUrl);
            response.EnsureSuccessStatusCode();

            string responseBody = await response.Content.ReadAsStringAsync();
            JObject searchResult = JObject.Parse(responseBody);

            if (searchResult["results"] != null && searchResult["results"].HasValues)
            {
                int movieId = (int)searchResult["results"][0]["id"];
                string detailsUrl = $"https://api.themoviedb.org/3/movie/{movieId}?api_key={_apiKey}";

                response = await Http.GetAsync(detailsUrl);
                response.EnsureSuccessStatusCode();

                responseBody = await response.Content.ReadAsStringAsync();
                JObject movieDetails = JObject.Parse(responseBody);

                Synopsis = movieDetails["overview"]?.ToString() ?? "Synopsis not available.";
            }
            else
            {
                Synopsis = "Movie not found.";
            }
        }
        catch (Exception ex)
        {
            Synopsis = $"An error occurred: {ex.Message}";
        }
    }

    private void Edit()
    {
        if (MovieEvent != null)
            MovieEvent.IsEditing = true;
    }
    private void Cancel()
    {
        if (MovieEvent != null)
            MovieEvent.IsEditing = false;
    }
    private void Save()
    {
        if (MovieEvent != null)
        {
            if (MovieEvent.AlreadySeen)
            {
                MovieEvent.SeenDate = new DateTime(selectedYear, 1, 1);
            }
            db.AddOrUpdateMovieEvent(MovieEvent);
        }
        this.Cancel();
    }
}