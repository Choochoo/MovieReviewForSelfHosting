@using MovieReviewApp.Database
@using MovieReviewApp.Models
@inject MovieReviewService movieReviewService
@inject HttpClient Http
@using MovieReviewApp.Services
@using Newtonsoft.Json.Linq
@inject IConfiguration Configuration
@inject MessengerService MessengerService
@inject SecretsManager SecretsManager
@inject ImageService ImageService
@inject MarkdownService MarkdownService

@if (MovieEvent != null)
{
    try
    {
        <div class="card mb-3 @(MovieEvent.IsEditing ? "editing" : "")">
            <div class="card-body">
                <p style="text-align:center;font-size:1.2em">
                    @try
                    {
                        @MovieEvent.StartDate.ToString("MMMM yyyy")
                    }
                    catch
                    {
                        <span>Date not available</span>
                    }
                </p>
                <hr />
                @if (MovieEvent.IsEditing)
                {
                    try
                    {
                        <div><b>Person:</b> @MovieEvent.Person</div>
                        <div class="form-group">
                            <label><b>Movie: </b></label>
                            <input type="text" @bind="@MovieEvent.Movie" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label><b>IMDb: </b></label>
                            <input type="text" @bind="@MovieEvent.IMDb" class="form-control" />
                        </div>
                        <div class="form-group">
                            <ImageUpload @bind-ImageId="@MovieEvent.ImageId" 
                                       @bind-PosterUrl="@MovieEvent.PosterUrl" />
                        </div>
                        <div class="form-group">
                            <label><b>Reason:</b></label>
                            <div class="markdown-editor-container">
                                <ul class="nav nav-tabs mb-2">
                                    <li class="nav-item">
                                        <button class="nav-link @(showMarkdownPreview ? "" : "active")" type="button" @onclick="() => showMarkdownPreview = false">
                                            Edit
                                        </button>
                                    </li>
                                    <li class="nav-item">
                                        <button class="nav-link @(showMarkdownPreview ? "active" : "")" type="button" @onclick="() => showMarkdownPreview = true">
                                            Preview
                                        </button>
                                    </li>
                                </ul>
                                @if (showMarkdownPreview)
                                {
                                    <div class="markdown-preview form-control" style="min-height: 100px; height: auto;">
                                        @if (string.IsNullOrWhiteSpace(MovieEvent.Reasoning))
                                        {
                                            <span class="text-muted">Nothing to preview</span>
                                        }
                                        else
                                        {
                                            @((MarkupString)MovieEvent.Reasoning.Replace("\n", "<br/>"))
                                        }
                                    </div>
                                }
                                else
                                {
                                    <textarea placeholder="Your reason for choosing this film (supports Markdown formatting)" 
                                              @bind="@MovieEvent.Reasoning" 
                                              @bind:event="oninput"
                                              class="form-control"
                                              rows="15"></textarea>
                                    <small class="text-muted">Supports Markdown: **bold**, *italic*, [links](url), lists, etc.</small>
                                }
                            </div>
                        </div>
                        <div class="form-group">
                            <label><b>Meetup Time:</b></label>
                            <input type="datetime-local" @bind="MovieEvent.MeetupTime" class="form-control" step="3600" />
                        </div>
                        <div class="form-group">
                            <b>Have you already seen it?</b>
                            <input type="checkbox" @bind="@MovieEvent.AlreadySeen" class="form-check-input" />
                        </div>
                        @if (MovieEvent.AlreadySeen)
                        {
                            <div class="form-group">
                                <b>When?</b>
                                <select @bind="selectedYear" class="form-control">
                                    @foreach (var year in Enumerable.Range(1980, (DateProvider.Now.Year+1)-1980))
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                            </div>
                        }
                        <button type="button" class="btn btn-primary" @onclick="SaveAsync">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    }
                    catch
                    {
                        <div class="alert alert-danger">
                            An error occurred while loading the edit form. Please try again.
                        </div>
                    }
                }
                else
                {
                    try
                    {
                        <div style="margin-left:10%;width:80%;text-align:center">
                            @if (string.IsNullOrEmpty(MovieEvent.Movie))
                            {
                                <span>@MovieEvent.Person's turn to choose.</span>
                            }
                            else
                            {
                                <span><b>@MovieEvent.Person</b> chose the movie <b>'@MovieEvent.Movie'</b></span>
                                @if (MovieEvent.SeenDate != null)
                                {
                                    try
                                    {
                                        <span> for the month of @MovieEvent.EndDate.AddDays(-1).ToString("MMMM")</span>
                                    }
                                    catch
                                    {
                                        <span> (month information unavailable)</span>
                                    }
                                }
                                if (MovieEvent.AlreadySeen && MovieEvent.SeenDate.HasValue)
                                {
                                    <span> and last saw it in @MovieEvent.SeenDate.Value.Year.</span>
                                }
                                else
                                {
                                    <span> and has never seen it before.</span>
                                }
                                @if (MovieEvent.MeetupTime.HasValue)
                                {
                                    try
                                    {
                                        <br />
                                        <br />
                                        <span>We will discuss at <b>@MovieEvent.Person's</b> on <b>@MovieEvent.MeetupTime?.ToString("dddd M/d/yyyy h:mm tt").</b></span>
                                    }
                                    catch
                                    {
                                        <span>Meetup time format error</span>
                                    }
                                }
                            }
                        </div>
                        <br />

                        @if (MovieEvent.ImageId.HasValue)
                        {
                            <div>
                                <img style="width:100%" src="/api/image/@MovieEvent.ImageId" onerror="this.style.display='none';this.nextElementSibling.style.display='flex';" />
                                <div style="display:none;width:100%;height:300px;background:#f8f9fa;border:2px dashed #ccc;align-items:center;justify-content:center;color:#6c757d;">
                                    <div style="text-align:center;">
                                        <i class="bi bi-film" style="font-size:3rem;margin-bottom:1rem;"></i>
                                        <br>No Poster Available
                                    </div>
                                </div>
                                <br />
                                <br />
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(MovieEvent.Reasoning))
                        {
                            <div class="reasoning-content" style="width:90%;margin-left:5%">
                                @((MarkupString)MovieEvent.Reasoning)
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(MovieEvent.Movie) && !string.IsNullOrEmpty(Synopsis))
                        {
                            <div>
                                <p style="text-align:justify; width:90%;margin-left:5%">&nbsp;&nbsp;&nbsp;&nbsp;<b>Synopsis:</b> @Synopsis</p>
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(MovieEvent.IMDb))
                        {
                            <div>
                                <p style="text-align:justify; width:90%;margin-left:5%">IMDb: <a href="@MovieEvent.IMDb" target="_blank" rel="noopener noreferrer">Link</a></p>
                            </div>
                        }

                        @if (string.IsNullOrEmpty(MovieEvent.Movie))
                        {
                            <div style="text-align:center;width:100%">
                                <button type="button" style="background-color: blue; margin:20px" class="btn btn-secondary" @onclick="Edit">ADD MOVIE FOR @MovieEvent.StartDate.ToString("MMMM").ToUpper()</button>
                            </div>
                        }
                        else
                        {
                            <button type="button" class="btn btn-secondary" @onclick="Edit">Edit</button>
                        }
                    }
                    catch (Exception ex)
                    {
                        <div class="alert alert-danger">
                            An error occurred while displaying the movie information. Please refresh the page.
                        </div>
                    }
                }
            </div>
        </div>
    }
    catch (Exception ex)
    {
        <div class="alert alert-danger">
            An error occurred while loading the page. Please refresh to try again.
        </div>
    }
}
else
{
    <span>Loading...</span>
}

@code {

    [Parameter]
    public MovieEvent? MovieEvent { get; set; }

    private int selectedYear;
    private string? Synopsis = "Loading...";
    private string _apiKey = string.Empty;
    private bool isLoading = false;
    private bool showMarkdownPreview = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _apiKey = SecretsManager.GetSecret("TMDB:ApiKey") ?? Configuration["TMDB:ApiKey"] ?? "";
            if (string.IsNullOrEmpty(_apiKey))
            {
                throw new Exception("TMDB API key not found in configuration");
            }
        }
        catch (Exception ex)
        {
            Synopsis = "Error loading configuration";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (MovieEvent != null && MovieEvent.SeenDate.HasValue)
            {
                selectedYear = MovieEvent.SeenDate.Value.Year;
            }
            else
            {
                selectedYear = DateProvider.Now.Year;
            }

            if (MovieEvent != null && !string.IsNullOrEmpty(MovieEvent.Movie))
            {
                await GetMovieSynopsisAsync(MovieEvent.Movie);
            }

        }
        catch (Exception ex)
        {
            selectedYear = DateProvider.Now.Year;
            Synopsis = "Error loading movie details";
        }
    }

    private async Task GetMovieSynopsisAsync(string movieTitle)
    {
        if (string.IsNullOrEmpty(movieTitle))
        {
            Synopsis = "No movie title provided";
            return;
        }

        try
        {
            // First, verify API key
            if (string.IsNullOrEmpty(_apiKey))
            {
                Console.WriteLine("API Key is empty or null");
                Synopsis = "Configuration error: API key not found";
                return;
            }

            // Check for cached synopsis
            if (MovieEvent != null && !string.IsNullOrEmpty(MovieEvent.Synopsis))
            {
                Synopsis = MovieEvent.Synopsis;
                return;
            }

            string encodedTitle = Uri.EscapeDataString(movieTitle);
            string searchUrl = $"https://api.themoviedb.org/3/search/movie?api_key={_apiKey}&query={encodedTitle}";

            Console.WriteLine($"Making request to TMDB API for movie: {movieTitle}");
            Console.WriteLine($"Request URL (excluding API key): https://api.themoviedb.org/3/search/movie?api_key=HIDDEN&query={encodedTitle}");

            // Add headers for better error tracking
            var request = new HttpRequestMessage(HttpMethod.Get, searchUrl);
            request.Headers.Add("User-Agent", "MovieReviewApp/1.0");
            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            using var response = await Http.SendAsync(request);
            string responseBody = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"Response Status Code: {response.StatusCode}");
            Console.WriteLine($"Response Headers: {string.Join(", ", response.Headers.Select(h => $"{h.Key}={string.Join(";", h.Value)}"))}");

            if (!response.IsSuccessStatusCode)
            {
                Console.WriteLine($"Error Response Body: {responseBody}");
                Synopsis = $"API Error: {response.StatusCode} - {responseBody}";
                return;
            }

            var searchResult = JObject.Parse(responseBody);

            if (searchResult["results"] != null && searchResult["results"].HasValues)
            {
                int movieId = (int)searchResult["results"][0]["id"];
                string detailsUrl = $"https://api.themoviedb.org/3/movie/{movieId}?api_key={_apiKey}";

                var detailsRequest = new HttpRequestMessage(HttpMethod.Get, detailsUrl);
                detailsRequest.Headers.Add("User-Agent", "MovieReviewApp/1.0");
                detailsRequest.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                using var detailsResponse = await Http.SendAsync(detailsRequest);
                string detailsBody = await detailsResponse.Content.ReadAsStringAsync();

                if (!detailsResponse.IsSuccessStatusCode)
                {
                    Console.WriteLine($"Details Error Response: {detailsBody}");
                    Synopsis = $"Movie Details Error: {detailsResponse.StatusCode}";
                    return;
                }

                var movieDetails = JObject.Parse(detailsBody);
                Synopsis = movieDetails["overview"]?.ToString() ?? "Synopsis not available.";

                if (MovieEvent != null && !string.IsNullOrEmpty(Synopsis) &&
                    Synopsis != "Synopsis not available." && Synopsis != "Movie not found.")
                {
                    try
                    {
                        MovieEvent.Synopsis = Synopsis;
                        await Task.Run(() => movieReviewService.AddOrUpdateMovieEvent(MovieEvent));
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Cache error: {ex.Message}");
                        Console.WriteLine($"Stack trace: {ex.StackTrace}");
                    }
                }
            }
            else
            {
                Synopsis = "Movie not found.";
                Console.WriteLine("No results found in TMDB response");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP Request Exception:");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"Inner Exception: {ex.InnerException?.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            Synopsis = $"Network Error: {ex.Message}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General Exception:");
            Console.WriteLine($"Type: {ex.GetType().FullName}");
            Console.WriteLine($"Message: {ex.Message}");
            Console.WriteLine($"Inner Exception: {ex.InnerException?.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            Synopsis = $"Error: {ex.Message}";
        }
    }


    private void Edit()
    {
        try
        {
            if (MovieEvent != null)
            {
                MovieEvent.IsEditing = true;

                // Remove <br/> tags when editing
                if (!string.IsNullOrEmpty(MovieEvent.Reasoning))
                {
                    MovieEvent.Reasoning = MarkdownService.RemoveLineBreaks(MovieEvent.Reasoning);
                }

                // Set default MeetupTime if not already set
                if (!MovieEvent.MeetupTime.HasValue)
                {
                    // Default to 6pm on the last day of the month
                    MovieEvent.MeetupTime = MovieEvent.EndDate.Date.AddHours(18);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Edit error: {ex.Message}");
        }
    }

    private void Cancel()
    {
        try
        {
            if (MovieEvent != null)
                MovieEvent.IsEditing = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Cancel error: {ex.Message}");
        }
    }

    private async Task SaveAsync()
    {
        if (isLoading) return;

        try
        {
            isLoading = true;
            if (MovieEvent != null)
            {
                // Automatically convert any PosterUrl to blob storage before saving
                if (!string.IsNullOrEmpty(MovieEvent.PosterUrl) && !MovieEvent.ImageId.HasValue)
                {
                    var imageId = await ImageService.SaveImageFromUrlAsync(MovieEvent.PosterUrl);
                    if (imageId.HasValue)
                    {
                        MovieEvent.ImageId = imageId;
                        MovieEvent.PosterUrl = null; // Clear the URL since we now have a blob
                    }
                }

                if (MovieEvent.AlreadySeen)
                {
                    MovieEvent.SeenDate = new DateTime(selectedYear, 1, 1);
                }
                
                // Add <br/> tags before saving
                if (!string.IsNullOrEmpty(MovieEvent.Reasoning))
                {
                    MovieEvent.Reasoning = MarkdownService.AddLineBreaks(MovieEvent.Reasoning);
                }
                
                await Task.Run(() => movieReviewService.AddOrUpdateMovieEvent(MovieEvent));

                // Reload the MovieEvent from database to get the latest saved state
                var updatedMovieEvent = movieReviewService.GetMovieEventById(MovieEvent.Id);
                if (updatedMovieEvent != null)
                {
                    // Update the current MovieEvent with saved values
                    MovieEvent = updatedMovieEvent;

                    // Force UI refresh to show updated image state
                    StateHasChanged();
                }

                if (!string.IsNullOrEmpty(MovieEvent.Movie))
                {
                    //await MessengerService.SendMovieUpdateMessage(MovieEvent.Person, MovieEvent.Movie);
                }

                this.Cancel();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Save error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .reasoning-content {
        text-align: justify;
    }

    .reasoning-content p {
        margin-bottom: 0.5rem;
    }

    .reasoning-content ul, .reasoning-content ol {
        margin-left: 1.5rem;
        margin-bottom: 0.5rem;
    }

    .reasoning-content a {
        color: #0066cc;
        text-decoration: none;
    }

    .reasoning-content a:hover {
        text-decoration: underline;
    }

    .reasoning-content blockquote {
        border-left: 3px solid #ccc;
        padding-left: 1rem;
        margin: 0.5rem 0;
        color: #666;
    }

    .reasoning-content code {
        background-color: #f5f5f5;
        padding: 0.125rem 0.25rem;
        border-radius: 3px;
        font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
    }

    .reasoning-content pre {
        background-color: #f5f5f5;
        padding: 0.75rem;
        border-radius: 5px;
        overflow-x: auto;
        margin: 0.5rem 0;
    }

    .reasoning-content pre code {
        background-color: transparent;
        padding: 0;
    }

    .markdown-preview{
        background-color: initial;
    }

    .markdown-editor-container .nav-tabs {
        border-bottom: 1px solid #dee2e6;
    }

    .markdown-editor-container .nav-link {
        color: #495057;
        background-color: transparent;
        border: 1px solid transparent;
        border-top-left-radius: .25rem;
        border-top-right-radius: .25rem;
        padding: .5rem 1rem;
        cursor: pointer;
    }

    .markdown-editor-container .nav-link.active {
        color: #495057;
        background-color: #fff;
        border-color: #dee2e6 #dee2e6 #fff;
    }

    .markdown-editor-container .nav-link:hover {
        border-color: #e9ecef #e9ecef #dee2e6;
    }

    .markdown-preview {
        background-color: #fff;
        overflow-y: auto;
        max-height: 300px;
    }

    .markdown-preview p:last-child {
        margin-bottom: 0;
    }
</style>